{"version":3,"sources":["serviceWorker.js","apolloClient.js","common/graphqlConstants.js","common/graphqlHelpers.js","common/customHooks/useLights.js","common/customHooks/useSetLightState.js","common/customHooks/useSetLight.js","common/customHooks/useDiscoveredLights.js","common/customHooks/useAddLight.js","common/customHooks/useRemoveLight.js","common/customHooks/useLight.js","pages/main/MainPage.jsx","pages/main/index.js","pages/about/index.js","pages/about/AboutPage.jsx","pages/addLight/AddLightPage.jsx","pages/addLight/index.js","common/components/Slider.jsx","common/components/CircleColorPicker.jsx","common/customPropTypes.js","pages/light/LightPage.jsx","pages/light/index.js","pages/notFound/index.js","pages/notFound/NotFoundPage.jsx","App.jsx","index.js"],"names":["Boolean","window","location","hostname","match","serverName","host","wsProtocol","protocol","httpLink","HttpLink","uri","concat","wsLink","WebSocketLink","options","reconnect","HTTP_WS_LINK","split","_ref","query","_getMainDefinition","getMainDefinition","kind","operation","ON_ERROR_LINK","onError","_ref2","graphQLErrors","networkError","map","_ref3","message","locations","path","console","error","CACHE","InMemoryCache","client","ApolloClient","link","ApolloLink","from","cache","LIGHT_FIELDS","gql","_templateObject","LIGHT_STATE_FIELDS","_templateObject2","LIGHT_ADDED","_templateObject3","LIGHT_REMOVED","_templateObject4","LIGHT_CHANGED","_templateObject5","LIGHT_STATE_CHANGED","_templateObject6","LIGHT","_templateObject7","LIGHTS","_templateObject8","SET_LIGHT","_templateObject9","SET_LIGHT_STATE","_templateObject10","ADD_LIGHT","_templateObject11","REMOVE_LIGHT","_templateObject12","DISCOVERED_LIGHTS","_templateObject13","removeDiscoveredLightFromCache","lightToRemove","discoveredLights","readQuery","length","writeQuery","data","filter","light","id","name","addLightToCache","lightToAdd","lights","find","removeLightFromCache","useLights","QueryData","useQuery","fetchPolicy","notifyOnNetworkStatusChange","useSubscription","onSubscriptionData","subscriptionData","lightAdded","lightRemoved","throttleSpeed","process","REACT_APP_ENV","useSetLightState","setLightState","useMutation","throttledSetLightState","React","useRef","throttle","current","lightId","newLightState","optimisticResponse","currentLightState","arguments","undefined","Object","entries","newColor","assign","color","__typename","objectSpread","variables","lightState","useSetLight","setLight","throttledSetLight","lightData","useDiscoveredLights","pollInterval","useAddLight","addLight","updateCache","update","useRemoveLight","removeLight","useLight","StyledDiv","styled","div","MainPage_templateObject","MainPage","Body","_useLights","loading","networkStatus","refetch","handleRemoveLight","e","react_default","a","createElement","Typography","variant","key","Button","onClick","Switch","checked","state","on","onChange","target","disabled","connected","react_router_dom","to","AboutPage","AddLightPage_templateObject","AddLightPage","_React$useState","useState","_React$useState2","slicedToArray","newLight","setNewLight","AddLightPage_StyledDiv","then","TextField","placeholder","value","StyledSlider","Slider","Slider_templateObject","SmoothSlider","props","other","objectWithoutProperties","internalValue","setInternalValue","useEffect","_","newValue","defaultProps","CircleColorPicker","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onIroChange","_this$props","hex","hexString","myRef","createRef","_this$props2","height","width","colorWheel","iro","ColorPicker","nextProps","prevProps","off","className","ref","Component","CustomPicker","lightColor","PropTypes","shape","r","number","isRequired","g","b","string","bool","brightness","effect","speed","supportedEffects","arrayOf","ipAddress","macAddress","numLeds","udpPort","version","hardware","colorOrder","stripType","object","LightPage_templateObject","LightPage","newName","setNewName","_React$useState3","_React$useState4","removed","setRemoved","params","_useLight","log","_light$state","LightPage_StyledDiv","components_Slider","min","max","step","handleBrightnessChange","components_CircleColorPicker","_color$rgb","rgb","handleColorChange","supportedEffect","handleSpeedChange","react_router","push","NotFoundPage","pathname","theme","createMuiTheme","App","ApolloContext","StylesProvider","injectFirst","styled_components_browser_esm","CssBaseline","AppBar","position","Tabs","Tab","label","component","Link","exact","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4d5d1714.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\");\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// eslint-disable-next-line eslint-comments/disable-enable-pair\n/* eslint-disable no-console */\n// Apollo imports\nimport { ApolloClient } from \"apollo-client\"; // Base Apollo\nimport { InMemoryCache } from \"apollo-cache-inmemory\"; // Local Cache Storage\nimport { ApolloLink, split } from \"apollo-link\"; // Handles and manages the differnet apollo-link packages\nimport { HttpLink } from \"apollo-link-http\"; // Use Apollo Over HTTP (Queries, Mutations)\nimport { WebSocketLink } from \"apollo-link-ws\"; // Use Apollo Over Websockets (Subscriptions)\nimport { onError } from \"apollo-link-error\"; // Do custom logic when a GraphQL or network error occurs\nimport { getMainDefinition } from \"apollo-utilities\"; // Aids with splitting links\n\nconst serverName = window.location.host;\nconst wsProtocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n\n// Create an http link:\nconst httpLink = new HttpLink({\n  uri: `${window.location.protocol}//${serverName}/graphql`,\n});\n\n// Create a WebSocket link:\nconst wsLink = new WebSocketLink({\n  uri: `${wsProtocol}//${serverName}/graphql`,\n  options: {\n    reconnect: true,\n  },\n});\n\n// This link will handle sending out HTTP and WS requests\nconst HTTP_WS_LINK = split(\n  // Split the links so your query and mutations go to the apollo-link-http while subscriptions go to apollo-link-ws\n  ({ query }) => {\n    const { kind, operation } = getMainDefinition(query);\n    return kind === \"OperationDefinition\" && operation === \"subscription\";\n  },\n  wsLink,\n  httpLink\n);\n\n// This link does custom logic when a GraphQL or network error occurs\nconst ON_ERROR_LINK = onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors)\n    graphQLErrors.map(({ message, locations, path }) =>\n      console.error(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`)\n    );\n  if (networkError) console.error(`[Network error]: ${networkError}`);\n});\n\nconst CACHE = new InMemoryCache();\n\n// Point appolo towards graphql server\nconst client = new ApolloClient({\n  link: ApolloLink.from([ON_ERROR_LINK, HTTP_WS_LINK]),\n  cache: CACHE,\n});\n\nexport default client;\n","import gql from \"graphql-tag\";\n\nconst LIGHT_FIELDS = gql`\n  fragment lightFields on Light {\n    id\n    name\n    supportedEffects\n    ipAddress\n    macAddress\n    numLeds\n    udpPort\n    version\n    hardware\n    colorOrder\n    stripType\n  }\n`;\n\nconst LIGHT_STATE_FIELDS = gql`\n  fragment lightStateFields on LightState {\n    id\n    connected\n    on\n    brightness\n    color {\n      r\n      g\n      b\n    }\n    effect\n    speed\n  }\n`;\n\n// This needs LIGHT_STATE_FIELDS for some reason\nexport const LIGHT_ADDED = gql`\n  subscription lightAdded {\n    lightAdded {\n      ...lightFields\n      state {\n        ...lightStateFields\n      }\n    }\n  }\n  ${LIGHT_FIELDS}\n  ${LIGHT_STATE_FIELDS}\n`;\n\n// This can not have LIGHT_STATE_FIELDS for some reason\nexport const LIGHT_REMOVED = gql`\n  subscription lightRemoved {\n    lightRemoved {\n      ...lightFields\n    }\n  }\n  ${LIGHT_FIELDS}\n`;\n\nexport const LIGHT_CHANGED = gql`\n  subscription lightChanged {\n    lightChanged {\n      ...lightFields\n    }\n  }\n  ${LIGHT_FIELDS}\n`;\n\nexport const LIGHT_STATE_CHANGED = gql`\n  subscription lightStateChanged {\n    lightStateChanged {\n      ...lightStateFields\n    }\n  }\n  ${LIGHT_STATE_FIELDS}\n`;\n\nexport const LIGHT = gql`\n  query light($lightId: String!) {\n    light(lightId: $lightId) {\n      ...lightFields\n      state {\n        ...lightStateFields\n      }\n    }\n  }\n  ${LIGHT_FIELDS}\n  ${LIGHT_STATE_FIELDS}\n`;\n\nexport const LIGHTS = gql`\n  query lights {\n    lights {\n      ...lightFields\n      state {\n        ...lightStateFields\n      }\n    }\n  }\n  ${LIGHT_FIELDS}\n  ${LIGHT_STATE_FIELDS}\n`;\n\nexport const SET_LIGHT = gql`\n  mutation setLight($lightId: String!, $lightData: LightInput!) {\n    setLight(lightId: $lightId, lightData: $lightData) {\n      ...lightFields\n    }\n  }\n  ${LIGHT_FIELDS}\n`;\n\nexport const SET_LIGHT_STATE = gql`\n  mutation setLightState($lightId: String!, $lightState: LightStateInput!) {\n    setLightState(lightId: $lightId, lightState: $lightState) {\n      ...lightStateFields\n    }\n  }\n  ${LIGHT_STATE_FIELDS}\n`;\n\nexport const ADD_LIGHT = gql`\n  mutation addLight($lightId: String!, $lightData: LightInput) {\n    addLight(lightId: $lightId, lightData: $lightData) {\n      ...lightFields\n    }\n  }\n  ${LIGHT_FIELDS}\n`;\n\nexport const REMOVE_LIGHT = gql`\n  mutation removeLight($lightId: String!) {\n    removeLight(lightId: $lightId) {\n      ...lightFields\n    }\n  }\n  ${LIGHT_FIELDS}\n`;\n\nexport const DISCOVERED_LIGHTS = gql`\n  query discoveredLights {\n    discoveredLights {\n      ...lightFields\n    }\n  }\n  ${LIGHT_FIELDS}\n`;\n","import { DISCOVERED_LIGHTS, LIGHTS } from \"common/graphqlConstants\";\n\nexport const removeDiscoveredLightFromCache = (cache, lightToRemove) => {\n  // Remove the added light from discoveredLights\n  try {\n    // Get the discovered lights in the cache\n    // This might throw an error if the discoveredLights query hasn't been called yet\n    const { discoveredLights } = cache.readQuery({\n      query: DISCOVERED_LIGHTS,\n    });\n\n    if (discoveredLights.length > 0) {\n      // Remove this newly addded light from discoveredLights if it exists\n      cache.writeQuery({\n        query: DISCOVERED_LIGHTS,\n        data: {\n          discoveredLights: discoveredLights.filter(light => light.id !== lightToRemove.id),\n        },\n      });\n    }\n  } catch (error) {\n    if (error.name === \"Invariant Violation\") return;\n    throw error;\n  }\n};\n\nexport const addLightToCache = (cache, lightToAdd) => {\n  try {\n    // Add the added light to GET_LIGHTS\n    const { lights } = cache.readQuery({\n      query: LIGHTS,\n    });\n\n    // If the light already exists, do nothing\n    if (lights.find(light => light.id === lightToAdd.id)) return;\n\n    // Write the light to the cache\n    cache.writeQuery({\n      query: LIGHTS,\n      data: { lights: lights.concat([lightToAdd]) },\n    });\n  } catch (error) {\n    if (error.name === \"Invariant Violation\") return;\n    throw error;\n  }\n};\n\nexport const removeLightFromCache = (cache, lightToRemove) => {\n  try {\n    // Get the current lights in the cache\n    const { lights } = cache.readQuery({\n      query: LIGHTS,\n    });\n\n    // Remove the light from the cache\n    cache.writeQuery({\n      query: LIGHTS,\n      data: { lights: lights.filter(light => light.id !== lightToRemove.id) },\n    });\n  } catch (error) {\n    if (error.name === \"Invariant Violation\") return;\n    throw error;\n  }\n};\n","import { useQuery, useSubscription } from \"react-apollo-hooks\";\nimport {\n  LIGHTS,\n  LIGHT_CHANGED,\n  LIGHT_STATE_CHANGED,\n  LIGHT_ADDED,\n  LIGHT_REMOVED,\n} from \"common/graphqlConstants\";\nimport {\n  removeDiscoveredLightFromCache,\n  addLightToCache,\n  removeLightFromCache,\n} from \"common/graphqlHelpers\";\n\nconst useLights = () => {\n  const QueryData = useQuery(LIGHTS, {\n    fetchPolicy: \"cache-and-network\",\n    notifyOnNetworkStatusChange: true,\n  });\n\n  // This will automatically update the light in the cache when it gets a message\n  useSubscription(LIGHT_CHANGED);\n\n  // This will automatically update the light state in the cache when it gets a message\n  useSubscription(LIGHT_STATE_CHANGED);\n\n  // This will automatically add lights to the cache when it gets a message\n  useSubscription(LIGHT_ADDED, {\n    onSubscriptionData: ({ client, subscriptionData }) => {\n      if (!subscriptionData.data || !subscriptionData.data.lightAdded) {\n        return;\n      }\n      const { lightAdded } = subscriptionData.data;\n\n      // If no data was returned, do nothing\n      if (!lightAdded) return;\n\n      // Remove the added light from discoveredLights\n      removeDiscoveredLightFromCache(client, lightAdded);\n\n      // Add the light to LIGHTS\n      addLightToCache(client, lightAdded);\n    },\n  });\n\n  // This will automatically remove lights from the cache when it gets a message\n  useSubscription(LIGHT_REMOVED, {\n    onSubscriptionData: ({ client, subscriptionData }) => {\n      if (!subscriptionData.data || !subscriptionData.data.lightRemoved) {\n        return;\n      }\n      const { lightRemoved } = subscriptionData.data;\n\n      // If no data was returned, do nothing\n      if (!lightRemoved) return;\n\n      removeLightFromCache(client, lightRemoved);\n    },\n  });\n\n  return QueryData;\n};\n\nexport default useLights;\n","import { useMutation } from \"react-apollo-hooks\";\nimport { SET_LIGHT_STATE } from \"common/graphqlConstants\";\nimport React from \"react\";\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { throttle } from \"lodash\";\n\nconst throttleSpeed = process.env.REACT_APP_ENV === \"test\" ? 0 : 500;\n\nconst useSetLightState = () => {\n  const setLightState = useMutation(SET_LIGHT_STATE);\n\n  // Use a ref here to store the value of setLightState so that it doesn't change on rerenders.\n  // This is necessary for lodash throttle to function properly\n  const { current: throttledSetLightState } = React.useRef(throttle(setLightState, throttleSpeed));\n\n  const optimisticSetLightState = (lightId, newLightState, currentLightState = null) => {\n    let optimisticResponse;\n    // If the currentLightState is provided\n    if (currentLightState && Object.entries(currentLightState).length === 0) {\n      const newColor = Object.assign({}, currentLightState.color, newLightState.color);\n      // Set up the optimistic response\n      optimisticResponse = {\n        __typename: \"Mutation\",\n        setLightState: {\n          __typename: \"LightState\",\n          ...currentLightState,\n          ...newLightState,\n          color: newColor,\n        },\n      };\n    }\n\n    return throttledSetLightState({\n      variables: {\n        lightId,\n        lightState: newLightState,\n      },\n      optimisticResponse,\n    });\n  };\n\n  return optimisticSetLightState;\n};\n\nexport default useSetLightState;\n","import { useMutation } from \"react-apollo-hooks\";\nimport { SET_LIGHT } from \"common/graphqlConstants\";\nimport React from \"react\";\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { throttle } from \"lodash\";\n\nconst throttleSpeed = process.env.REACT_APP_ENV === \"test\" ? 0 : 500;\n\nconst useSetLight = () => {\n  const setLight = useMutation(SET_LIGHT);\n\n  // Use a ref here to store the value of setLightState so that it doesn't change on rerenders.\n  // This is necessary for lodash throttle to function properly\n  const { current: throttledSetLight } = React.useRef(throttle(setLight, throttleSpeed));\n\n  const easySetLight = (lightId, lightData) => {\n    return throttledSetLight({\n      variables: {\n        lightId,\n        lightData,\n      },\n    });\n  };\n\n  return easySetLight;\n};\n\nexport default useSetLight;\n","import { useQuery } from \"react-apollo-hooks\";\nimport { DISCOVERED_LIGHTS } from \"common/graphqlConstants\";\n\nconst useDiscoveredLights = () => {\n  const QueryData = useQuery(DISCOVERED_LIGHTS, {\n    fetchPolicy: \"cache-and-network\",\n    pollInterval: 3000,\n  });\n\n  return QueryData;\n};\n\nexport default useDiscoveredLights;\n","import { useMutation } from \"react-apollo-hooks\";\nimport { ADD_LIGHT } from \"common/graphqlConstants\";\nimport { removeDiscoveredLightFromCache, addLightToCache } from \"common/graphqlHelpers\";\n\nconst useAddLight = () => {\n  const addLight = useMutation(ADD_LIGHT);\n\n  const updateCache = (cache, { data }) => {\n    // If no data was returned, do nothing\n    if (!data.addLight) return;\n\n    // Remove the added light from discoveredLights\n    removeDiscoveredLightFromCache(cache, data.addLight);\n\n    // Add the light to LIGHTS\n    addLightToCache(cache, data.addLight);\n  };\n\n  const cacheUpdatingAddLight = (lightId, lightData) => {\n    return addLight({\n      variables: {\n        lightId,\n        lightData,\n      },\n      update: updateCache,\n    });\n  };\n\n  return cacheUpdatingAddLight;\n};\n\nexport default useAddLight;\n","import { useMutation } from \"react-apollo-hooks\";\nimport { REMOVE_LIGHT } from \"common/graphqlConstants\";\nimport { removeLightFromCache } from \"common/graphqlHelpers\";\n\nconst useRemoveLight = () => {\n  const removeLight = useMutation(REMOVE_LIGHT);\n\n  const updateCache = (cache, { data }) => {\n    // If no data was returned, do nothing\n    if (!data.removeLight) return;\n\n    // Remove the added light from LIGHTS\n    removeLightFromCache(cache, data.removeLight);\n  };\n\n  const cacheUpdatingRemoveLight = (lightId, lightData) => {\n    return removeLight({\n      variables: {\n        lightId,\n        lightData,\n      },\n      update: updateCache,\n    });\n  };\n\n  return cacheUpdatingRemoveLight;\n};\n\nexport default useRemoveLight;\n","import { useQuery, useSubscription } from \"react-apollo-hooks\";\nimport { LIGHT, LIGHT_CHANGED, LIGHT_STATE_CHANGED } from \"common/graphqlConstants\";\n\nconst useLight = lightId => {\n  const QueryData = useQuery(LIGHT, {\n    fetchPolicy: \"cache-and-network\",\n    notifyOnNetworkStatusChange: true,\n    variables: {\n      lightId,\n    },\n  });\n\n  // This will automatically update the light in the cache when it gets a message\n  useSubscription(LIGHT_CHANGED);\n\n  // This will automatically update the light state in the cache when it gets a message\n  useSubscription(LIGHT_STATE_CHANGED);\n\n  return QueryData;\n};\n\nexport default useLight;\n","import React from \"react\";\nimport { useLights, useSetLightState, useRemoveLight } from \"common/customHooks\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport Switch from \"@material-ui/core/Switch\";\nimport styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\n\nconst StyledDiv = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst MainPage = () => {\n  const { data, error, loading, networkStatus, refetch } = useLights();\n  const setLightState = useSetLightState();\n  const removeLight = useRemoveLight();\n\n  const handleRemoveLight = light => e => {\n    removeLight(light.id);\n  };\n\n  const handleStateChange = lightState => e => {\n    const newLightState = {\n      on: e.target.checked,\n    };\n\n    setLightState(lightState.id, newLightState, lightState);\n  };\n\n  let Body;\n  if (loading || networkStatus === 4) {\n    Body = <Typography variant=\"body1\">Loading...</Typography>;\n  } else if (error) {\n    Body = <Typography variant=\"body1\">Error.</Typography>;\n  } else if (!data.lights.length) {\n    Body = <Typography variant=\"body1\">None</Typography>;\n  } else {\n    Body = data.lights.map(light => (\n      <StyledDiv key={light.id}>\n        <Button onClick={handleRemoveLight(light)}>Remove</Button>\n        <Switch\n          checked={light.state.on}\n          onChange={handleStateChange(light.state)}\n          disabled={!light.state.connected}\n          color=\"primary\"\n        />\n        <Link to={`/light/${light.id}`}>\n          <Typography variant=\"body1\">{light.name}</Typography>\n        </Link>\n      </StyledDiv>\n    ));\n  }\n  return (\n    <div>\n      <Typography variant=\"h4\">Prysma</Typography>\n      <Button onClick={() => refetch()}>Refetch</Button>\n      <Typography variant=\"h6\">Light List</Typography>\n      {Body}\n    </div>\n  );\n};\n\nexport default MainPage;\n","import MainPage from \"./MainPage\";\n\nexport default MainPage;\n","import AboutPage from \"./AboutPage\";\n\nexport default AboutPage;\n","import React from \"react\";\n\nconst AboutPage = () => <div>TODO</div>;\n\nexport default AboutPage;\n","import React from \"react\";\nimport { useAddLight, useDiscoveredLights } from \"common/customHooks\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\nimport styled from \"styled-components\";\n\nconst StyledDiv = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst AddLightPage = () => {\n  const [newLight, setNewLight] = React.useState(\"\");\n  const addLight = useAddLight();\n  const { data } = useDiscoveredLights();\n\n  const handleChange = e => {\n    setNewLight(e.target.value);\n  };\n\n  const handleAddLight = lightId => () => {\n    addLight(lightId);\n  };\n\n  const handleAddCustomLight = () => {\n    addLight(newLight).then(() => {\n      setNewLight(\"\");\n    });\n  };\n\n  let Body;\n  if (!data.discoveredLights) {\n    Body = <Typography variant=\"body1\">Loading...</Typography>;\n  } else if (!data.discoveredLights.length) {\n    Body = <Typography variant=\"body1\">None</Typography>;\n  } else {\n    Body = data.discoveredLights.map(light => (\n      <StyledDiv key={light.id}>\n        <Button onClick={handleAddLight(light.id)}>Add</Button>\n        <Typography variant=\"body1\">{light.id}</Typography>\n      </StyledDiv>\n    ));\n  }\n  return (\n    <div>\n      <Typography variant=\"h4\">Add Light</Typography>\n      <StyledDiv>\n        <Button onClick={handleAddCustomLight}>Add</Button>\n        <TextField placeholder=\"New Light ID\" value={newLight} onChange={handleChange} />\n      </StyledDiv>\n      <Typography variant=\"h6\">Discovered Lights</Typography>\n      {Body}\n    </div>\n  );\n};\n\nexport default AddLightPage;\n","import AddLightPage from \"./AddLightPage\";\n\nexport default AddLightPage;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Slider from \"@material-ui/lab/Slider\";\nimport styled from \"styled-components\";\n\nconst StyledSlider = styled(Slider)`\n  padding-top: 1rem;\n  padding-bottom: 1rem;\n`;\n\nconst SmoothSlider = props => {\n  const { value, onChange, ...other } = props;\n  const [internalValue, setInternalValue] = React.useState(value);\n\n  React.useEffect(() => {\n    setInternalValue(value);\n  }, [value]); // Only re-run the effect if count changes\n\n  const handleChange = (_, newValue) => {\n    setInternalValue(newValue);\n    onChange(newValue);\n  };\n\n  return <StyledSlider value={internalValue} onChange={handleChange} {...other} />;\n};\n\nSmoothSlider.propTypes = {\n  value: PropTypes.number.isRequired,\n  onChange: PropTypes.func,\n};\n\nSmoothSlider.defaultProps = {\n  onChange: () => {},\n};\n\nexport default SmoothSlider;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { CustomPicker } from \"react-color\";\nimport iro from \"@jaames/iro\";\n\nclass CircleColorPicker extends React.Component {\n  constructor(props) {\n    super(props);\n    this.myRef = React.createRef();\n  }\n\n  componentDidMount() {\n    const { hex, height, width } = this.props;\n    this.colorWheel = new iro.ColorPicker(this.myRef.current, {\n      color: hex,\n      height: height || 320,\n      width: width || 320,\n    });\n    this.colorWheel.on(\"color:change\", this.onIroChange);\n  }\n\n  shouldComponentUpdate(nextProps) {\n    const { hex } = this.props;\n    return hex !== nextProps.hex;\n  }\n\n  componentDidUpdate(prevProps) {\n    const { hex } = this.props;\n    if (hex !== prevProps.hex) {\n      this.colorWheel.color.hexString = hex;\n    }\n  }\n\n  componentWillUnmount() {\n    this.colorWheel.off(\"color:change\", this.onIroChange);\n  }\n\n  onIroChange = color => {\n    const { hex, onChange } = this.props;\n    if (hex !== color.hexString) {\n      onChange(color.hexString);\n    }\n  };\n\n  render() {\n    return <div className=\"ColorWheel\" ref={this.myRef} />;\n  }\n}\n\nCircleColorPicker.propTypes = {\n  color: PropTypes.shape({\n    r: PropTypes.number.isRequired,\n    g: PropTypes.number.isRequired,\n    b: PropTypes.number.isRequired,\n  }).isRequired,\n  hex: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  height: PropTypes.number,\n  width: PropTypes.number,\n};\n\nCircleColorPicker.defaultProps = {\n  height: 320,\n  width: 320,\n};\n\nexport default CustomPicker(CircleColorPicker);\n","import PropTypes from \"prop-types\";\n\nconst lightColor = PropTypes.shape({\n  r: PropTypes.number.isRequired,\n  g: PropTypes.number.isRequired,\n  b: PropTypes.number.isRequired,\n});\n\nconst lightState = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  connected: PropTypes.bool,\n  on: PropTypes.bool,\n  brightness: PropTypes.number,\n  color: lightColor,\n  effect: PropTypes.string,\n  speed: PropTypes.number,\n});\n\nconst light = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string,\n  supportedEffects: PropTypes.arrayOf(PropTypes.string),\n  ipAddress: PropTypes.string,\n  macAddress: PropTypes.string,\n  numLeds: PropTypes.number,\n  udpPort: PropTypes.number,\n  version: PropTypes.string,\n  hardware: PropTypes.string,\n  colorOrder: PropTypes.string,\n  stripType: PropTypes.string,\n  state: lightState,\n});\n\nconst match = PropTypes.object;\n\nconst location = PropTypes.object;\n\nexport default { light, lightColor, lightState, match, location };\n","import React from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport { useLight, useSetLightState, useRemoveLight, useSetLight } from \"common/customHooks\";\nimport styled from \"styled-components\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Switch from \"@material-ui/core/Switch\";\nimport Slider from \"common/components/Slider\";\nimport CircleColorPicker from \"common/components/CircleColorPicker\";\nimport customPropTypes from \"common/customPropTypes\";\n\nconst StyledDiv = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst LightPage = props => {\n  const { match } = props;\n\n  const [newName, setNewName] = React.useState(\"\");\n  const [removed, setRemoved] = React.useState(false);\n\n  const lightId = match.params.id;\n  const { data, error, loading } = useLight(lightId);\n  const setLight = useSetLight();\n  const setLightState = useSetLightState();\n  const removeLight = useRemoveLight();\n\n  console.log(data, error, loading);\n\n  const handleNameChange = e => {\n    setNewName(e.target.value);\n  };\n\n  const handleRenameLight = () => {\n    setLight(lightId, { name: newName }).then(() => {\n      setNewName(\"\");\n    });\n  };\n\n  const handleRemoveLight = () => {\n    removeLight(lightId).then(() => setRemoved(true));\n  };\n\n  const handleOnChange = currentLightState => e => {\n    const newLightState = {\n      on: e.target.checked,\n    };\n\n    setLightState(currentLightState.id, newLightState, currentLightState);\n  };\n\n  const handleBrightnessChange = currentLightState => brightness => {\n    const newLightState = {\n      brightness,\n    };\n\n    setLightState(currentLightState.id, newLightState, currentLightState);\n  };\n\n  const handleColorChange = currentLightState => color => {\n    const { r, g, b } = color.rgb;\n    const newLightState = {\n      color: { r, g, b },\n    };\n\n    setLightState(currentLightState.id, newLightState, currentLightState);\n  };\n\n  const handleEffectChange = (effect, currentLightState) => () => {\n    const newLightState = {\n      effect,\n    };\n\n    setLightState(currentLightState.id, newLightState, currentLightState);\n  };\n\n  const handleSpeedChange = currentLightState => speed => {\n    const newLightState = {\n      speed,\n    };\n\n    setLightState(currentLightState.id, newLightState, currentLightState);\n  };\n\n  let Body;\n  if (loading) {\n    Body = <Typography variant=\"body1\">Loading...</Typography>;\n  } else if (error) {\n    Body = <Typography variant=\"body1\">Error.</Typography>;\n  } else {\n    const { light } = data;\n    const {\n      id,\n      name,\n      supportedEffects,\n      ipAddress,\n      macAddress,\n      numLeds,\n      udpPort,\n      version,\n      hardware,\n      colorOrder,\n      stripType,\n    } = light;\n    const { connected, on, brightness, color, effect, speed } = light.state;\n    Body = (\n      <div>\n        <Typography variant=\"h3\">{light.name}</Typography>\n        <Typography variant=\"h6\">Rename the light: </Typography>\n        <TextField\n          placeholder=\"New Light Name\"\n          value={newName}\n          color=\"primary\"\n          onChange={handleNameChange}\n        />\n        <Button onClick={handleRenameLight} color=\"primary\">\n          Rename\n        </Button>\n        <Typography variant=\"h6\">{`Connected: ${connected}`}</Typography>\n        <StyledDiv>\n          <Typography variant=\"h6\">On: </Typography>\n          <Switch\n            checked={on}\n            onChange={handleOnChange(light.state)}\n            disabled={!connected}\n            color=\"primary\"\n          />\n        </StyledDiv>\n        <Typography variant=\"h6\">Brightness: </Typography>\n        <Slider\n          value={brightness}\n          min={0}\n          max={100}\n          step={1}\n          onChange={handleBrightnessChange(light.state)}\n          disabled={!connected}\n          color=\"primary\"\n        />\n        <Typography variant=\"h6\">Color: </Typography>\n        <CircleColorPicker\n          color={color}\n          onChange={handleColorChange(light)}\n          height={320}\n          width={320}\n        />\n        <Typography variant=\"h6\">{`Current Effect: ${effect}`}</Typography>\n        {supportedEffects &&\n          supportedEffects.map(supportedEffect => (\n            <Button\n              key={supportedEffect}\n              disabled={!connected}\n              color=\"primary\"\n              onClick={handleEffectChange(supportedEffect, light)}\n            >\n              {supportedEffect}\n            </Button>\n          ))}\n        <Typography variant=\"h6\">Effect Speed:</Typography>\n        <Slider\n          value={speed}\n          min={1}\n          max={7}\n          step={1}\n          onChange={handleSpeedChange(light.state)}\n          color=\"primary\"\n          disabled={!connected}\n        />\n        <Typography variant=\"h6\">Config Info:</Typography>\n        <Typography variant=\"body1\">{`ID: ${id}`}</Typography>\n        <Typography variant=\"body1\">{`Name: ${name}`}</Typography>\n        <Typography variant=\"body1\">{`IP Address: ${ipAddress}`}</Typography>\n        <Typography variant=\"body1\">{`MAC Address: ${macAddress}`}</Typography>\n        <Typography variant=\"body1\">{`Number of LEDs: ${numLeds}`}</Typography>\n        <Typography variant=\"body1\">{`UDP Port: ${udpPort}`}</Typography>\n        <Typography variant=\"body1\">{`Version: ${version}`}</Typography>\n        <Typography variant=\"body1\">{`Hardware: ${hardware}`}</Typography>\n        <Typography variant=\"body1\">{`Color Order: ${colorOrder}`}</Typography>\n        <Typography variant=\"body1\">{`Strip Type: ${stripType}`}</Typography>\n        <Typography variant=\"h6\">Remove the light: </Typography>\n        <Button onClick={handleRemoveLight} color=\"primary\">\n          Remove\n        </Button>\n        {removed && <Redirect push to=\"/\" />}\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <Link to=\"/\">\n        <Button>{\"< Back\"}</Button>\n      </Link>\n      {Body}\n    </div>\n  );\n};\n\nLightPage.propTypes = {\n  match: customPropTypes.match.isRequired,\n};\n\nexport default LightPage;\n","import LightPage from \"./LightPage\";\n\nexport default LightPage;\n","import NotFoundPage from \"./NotFoundPage\";\n\nexport default NotFoundPage;\n","import React from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { Link } from \"react-router-dom\";\nimport customPropTypes from \"common/customPropTypes\";\n\nconst NotFoundPage = props => {\n  const { location } = props;\n  return (\n    <div>\n      <Link to=\"/\">\n        <Typography variant=\"body1\">{\"< Back to main\"}</Typography>\n      </Link>\n      <Typography variant=\"h2\">{`No Match For ${location.pathname}`}</Typography>\n    </div>\n  );\n};\n\nNotFoundPage.propTypes = {\n  location: customPropTypes.location.isRequired,\n};\n\nexport default NotFoundPage;\n","import React from \"react\";\nimport { ApolloProvider } from \"react-apollo-hooks\"; // Connect Apollo to React\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { StylesProvider } from \"@material-ui/styles\";\nimport { ThemeProvider } from \"styled-components\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport client from \"./apolloClient\";\nimport MainPage from \"./pages/main\";\nimport AboutPage from \"./pages/about\";\nimport AddLightPage from \"./pages/addLight\";\nimport LightPage from \"./pages/light\";\nimport NotFoundPage from \"./pages/notFound\";\n\nconst theme = createMuiTheme();\n\nconst App = () => (\n  <ApolloProvider client={client}>\n    <StylesProvider injectFirst>\n      <ThemeProvider theme={theme}>\n        <Router>\n          <CssBaseline>\n            <AppBar position=\"static\">\n              <Tabs>\n                <Tab label=\"Home\" component={Link} to=\"/\" />\n                <Tab label=\"Add Light\" component={Link} to=\"/addLight/\" />\n                <Tab label=\"About\" component={Link} to=\"/about/\" />\n              </Tabs>\n            </AppBar>\n            <Switch>\n              {/* The switch uses the first route that matches instead of using multiple */}\n              <Route path=\"/\" exact component={MainPage} />\n              <Route path=\"/about/\" exact component={AboutPage} />\n              <Route path=\"/addLight/\" exact component={AddLightPage} />\n              <Route path=\"/light/:id\" exact component={LightPage} />\n              <Route component={NotFoundPage} />\n            </Switch>\n            {/* Put any modals/things that can show up over pages that you want routed outside the switch */}\n          </CssBaseline>\n        </Router>\n      </ThemeProvider>\n    </StylesProvider>\n  </ApolloProvider>\n);\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"typeface-roboto\"; // Font Import so we dont have to use the CDN\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}