{"version":3,"sources":["lib/apollo.ts","screens/NotFound/NotFound.tsx","generated/graphql.tsx","components/SmoothSlider/SmoothSlider.tsx","lib/graphqlConstants.ts","lib/graphqlHelpers.ts","lib/hooks/useLightsQueryWithSubscriptions.tsx","lib/hooks/useLightQueryWithSubscriptions.tsx","lib/hooks/useThrottledSetLightMutation.tsx","components/CircleColorPicker/CircleColorPicker.tsx","screens/Light/Light.tsx","screens/AddLight/AddLight.tsx","screens/About/About.tsx","screens/Home/Home.tsx","components/App/App.tsx","index.tsx"],"names":["serverName","window","location","host","wsProtocol","protocol","httpLink","HttpLink","uri","concat","wsLink","WebSocketLink","options","reconnect","HTTP_WS_LINK","split","_ref","query","definition","getMainDefinition","kind","operation","ON_ERROR_LINK","onError","_ref2","graphQLErrors","networkError","map","_ref3","message","locations","path","console","error","CACHE","InMemoryCache","client","ApolloClient","link","ApolloLink","from","cache","NotFound","props","react_default","a","createElement","react_router_dom","to","Typography","variant","pathname","lightFieldsFragmentDoc","gql","_templateObject","LightDocument","_templateObject2","LightsDocument","_templateObject3","DiscoveredLightsDocument","_templateObject4","SetLightDocument","_templateObject5","useSetLightMutation","baseOptions","ReactApolloHooks","AddLightDocument","_templateObject6","RemoveLightDocument","_templateObject7","useRemoveLightMutation","LightChangedDocument","_templateObject8","useLightChangedSubscription","LightAddedDocument","_templateObject9","LightRemovedDocument","_templateObject10","SmoothSlider","value","onChange","other","Object","objectWithoutProperties","_React$useState","React","useState","_React$useState2","slicedToArray","internalValue","setInternalValue","useEffect","Slider","assign","_","newValue","isArray","defaultProps","LIGHT_FIELDS","graphqlConstants_templateObject","LIGHTS","graphqlConstants_templateObject2","graphqlConstants_templateObject3","DISCOVERED_LIGHTS","graphqlConstants_templateObject4","removeLightFromCache","graphqlConstants_templateObject5","graphqlConstants_templateObject6","graphqlConstants_templateObject7","graphqlConstants_templateObject8","graphqlConstants_templateObject9","graphqlConstants_templateObject10","proxy","lightToRemove","result","readQuery","lights","writeQuery","data","filter","light","id","name","addLightToCache","lightToAdd","removeDiscoveredLightFromCache","discoveredLightToRemove","discoveredLights","useLightsQueryWithSubscriptions","queryOptions","QueryData","useLightAddedSubscription","onSubscriptionData","subscriptionData","lightAdded","useLightRemovedSubscription","lightRemoved","useLightQueryWithSubscriptions","throttleSpeed","process","REACT_APP_ENV","ColorPickerContainer","styled","div","CircleColorPicker_templateObject","disabled","DisabledDiv","CircleColorPicker_templateObject2","width","_ref4","theme","palette","text","CircleColorPicker","color","inUseRef","useRef","colorPickerEl","iroColorPicker","current","iro","ColorPicker","layout","component","ui","Wheel","on","test","_ref5","hexString","toUpperCase","off","toLowerCase","resize","Fragment","ref","StyledDiv","Light_templateObject","StyledSlider","Light_templateObject2","EffectsDiv","Light_templateObject3","OffsetColorDiv","Light_templateObject4","Light","Body","currentLight","match","params","_useLightQueryWithSub","fetchPolicy","notifyOnNetworkStatusChange","variables","loading","newName","setNewName","_React$useState3","_React$useState4","removed","setRemoved","setLight","throttle","useThrottledSetLightMutation","removeLight","TextField","placeholder","e","target","Button","onClick","lightData","optimisticResponse","__typename","objectSpread","then","connected","Switch","checked","handleOnChange","brightness","min","max","step","handleBrightnessChange","valueLabelDisplay","components_CircleColorPicker_CircleColorPicker","handleColorChange","effect","supportedEffects","supportedEffect","key","speed","handleSpeedChange","marks","ipAddress","macAddress","numLeds","udpPort","version","hardware","colorOrder","stripType","update","removeLightData","handleRemoveLight","react_router","push","AddLight_templateObject","AddLight","newLight","setNewLight","addLight","_useDiscoveredLightsQ","useDiscoveredLightsQuery","pollInterval","length","AddLight_StyledDiv","addLightData","About","Home_templateObject","Home","_useLightsQueryWithSu","networkStatus","refetch","handleStateChange","handleRefetch","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","reload","stop","apply","this","arguments","Home_StyledDiv","createMuiTheme","App","ApolloContext","StylesProvider","injectFirst","styled_components_browser_esm","CssBaseline","AppBar","position","Tabs","Tab","label","Link","exact","ReactDOM","render","components_App_App","document","getElementById"],"mappings":"oUAWMA,EAAaC,OAAOC,SAASC,KAC7BC,EAA0C,WAA7BH,OAAOC,SAASG,SAAwB,OAAS,MAG9DC,EAAW,IAAIC,IAAS,CAC5BC,IAAG,GAAAC,OAAKR,OAAOC,SAASG,SAArB,MAAAI,OAAkCT,EAAlC,cAICU,EAAS,IAAIC,IAAc,CAC/BH,IAAG,GAAAC,OAAKL,EAAL,MAAAK,OAAoBT,EAApB,YACHY,QAAS,CACPC,WAAW,KASTC,EAAeC,YAEnB,SAAAC,GAAwB,IAArBC,EAAqBD,EAArBC,MACKC,EAAaC,YAAkBF,GACrC,MAA2B,wBAApBC,EAAWE,MAA2D,iBAAzBF,EAAWG,WAEjEX,EACAJ,GAIIgB,EAAgBC,YAAQ,SAAAC,GAA2C,IAAxCC,EAAwCD,EAAxCC,cAAeC,EAAyBF,EAAzBE,aAC1CD,GACFA,EAAcE,IAAI,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,QAASC,EAAZF,EAAYE,UAAWC,EAAvBH,EAAuBG,KAAvB,OAChBC,QAAQC,MAAR,6BAAAxB,OAA2CoB,EAA3C,gBAAApB,OAAiEqB,EAAjE,YAAArB,OAAqFsB,MAErFL,GAAcM,QAAQC,MAAR,oBAAAxB,OAAkCiB,MAGhDQ,EAAQ,IAAIC,IAGLC,EAAS,IAAIC,IAAa,CACrCC,KAAMC,IAAWC,KAAK,CAAClB,EAAeR,IACtC2B,MAAOP,aCrCMQ,EAdE,SACfC,GACwD,IAChDzC,EAAayC,EAAbzC,SACR,OACE0C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,GAAG,KACPJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAYC,QAAQ,SAAS,mBAE/BN,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAYC,QAAQ,MAApB,gBAAAzC,OAA0CP,EAASiD,k6DCqLlD,IAAMC,EAAyBC,IAAHC,KAqBtBC,EAAgBF,IAAHG,IAMtBJ,GAQG,IAAMK,GAAiBJ,IAAHK,IAMvBN,GAQG,IAAMO,GAA2BN,IAAHO,IAMjCR,GAWG,IAAMS,GAAmBR,IAAHS,IAMzBV,GAOG,SAASW,GACdC,GAEA,OAAOC,IACLJ,GACAG,GAGG,IAAME,GAAmBb,IAAHc,IAMzBf,GAeG,IAAMgB,GAAsBf,IAAHgB,IAM5BjB,GAOG,SAASkB,GACdN,GAKA,OAAOC,IACLG,GACAJ,GAGG,IAAMO,GAAuBlB,IAAHmB,IAM7BpB,GAGG,SAASqB,GACdT,GAKA,OAAOC,IAGLM,GAAsBP,GAEnB,IAAMU,GAAqBrB,IAAHsB,IAM3BvB,GAcG,IAAMwB,GAAuBvB,IAAHwB,IAM7BzB,kEC5WE0B,GAAe,SACnBnC,GACsD,IAC9CoC,EAA8BpC,EAA9BoC,MAAOC,EAAuBrC,EAAvBqC,SAAaC,EAD0BC,OAAAC,GAAA,EAAAD,CAChBvC,EADgB,sBAAAyC,EAEZC,IAAMC,SAASP,GAFHQ,EAAAL,OAAAM,EAAA,EAAAN,CAAAE,EAAA,GAE/CK,EAF+CF,EAAA,GAEhCG,EAFgCH,EAAA,GAKtDF,IAAMM,UAAU,WACdD,EAAiBX,IAChB,CAACA,IASJ,OAAOnC,EAAAC,EAAAC,cAAC8C,GAAA,EAADV,OAAAW,OAAA,CAAQd,MAAOU,EAAeT,SAPhB,SAACc,EAAoBC,GACpCC,mBAAQD,IACRN,IAAkBM,IACtBL,EAAiBK,GACjBf,EAASe,MAGsDd,KAGnEH,GAAamB,aAAe,CAC1BjB,SAAU,cAGGF,+2DChCf,IAAMoB,GAAe7C,IAAH8C,MA+BLC,IATQ/C,IAAHgD,KAMdH,IAGkB7C,IAAHiD,KAMfJ,KAGSK,GAAoBlD,IAAHmD,KAM1BN,IC5CSO,ID+CYpD,IAAHqD,KAMlBR,IAGqB7C,IAAHsD,KAMlBT,IAGwB7C,IAAHuD,KAMrBV,IAGyB7C,IAAHwD,KAMtBX,IAGuB7C,IAAHyD,KAMpBZ,IAGyB7C,IAAH0D,KAMtBb,IClGgC,SAACc,EAAkBC,GACrD,IACE,IAAMC,EAASF,EAAMG,UAAuB,CAC1ClG,MAAOmF,KAET,IAAKc,IAAWA,EAAOE,OAAQ,OAJ7B,IAKMA,EAAWF,EAAXE,OAERJ,EAAMK,WAAW,CACfpG,MAAOmF,GACPkB,KAAM,CACJF,OAAQA,EAAOG,OAAO,SAACC,GAAD,OAAoBA,EAAMC,KAAOR,EAAcQ,QAGzE,MAAOxF,GAEP,GAAmB,wBAAfA,EAAMyF,KAAgC,OAC1C,MAAMzF,KAIG0F,GAAkB,SAACX,EAAkBY,GAChD,IACE,IAAMV,EAASF,EAAMG,UAAuB,CAC1ClG,MAAOmF,KAET,IAAKc,IAAWA,EAAOE,OAAQ,OAJ7B,IAKMA,EAAWF,EAAXE,OAERJ,EAAMK,WAAW,CACfpG,MAAOmF,GACPkB,KAAM,CAAEF,OAAQA,EAAO3G,OAAO,CAACmH,OAEjC,MAAO3F,GAEP,GAAmB,wBAAfA,EAAMyF,KAAgC,OAC1C,MAAMzF,IAIG4F,GAAiC,SAC5Cb,EACAc,GAEA,IACE,IAAMZ,EAASF,EAAMG,UAAiC,CACpDlG,MAAOsF,KAET,IAAKW,IAAWA,EAAOa,iBAAkB,OAJvC,IAKMA,EAAqBb,EAArBa,iBAERf,EAAMK,WAAW,CACfpG,MAAOsF,GACPe,KAAM,CACJS,iBAAkBA,EAAiBR,OACjC,SAACC,GAAD,OAAoBA,EAAMC,KAAOK,EAAwBL,QAI/D,MAAOxF,GAEP,GAAmB,wBAAfA,EAAMyF,KAAgC,OAC1C,MAAMzF,ICnDG+F,GAAkC,SAC7CC,GAEA,IJ8NAjE,EI9NMkE,GJ8NNlE,EI9NiCiE,EJgO1BhE,IAA6DR,GAAgBO,IIzLpF,OApCAS,KJ+UK,SACLT,GAKOC,IACLS,GACAV,GIpVFmE,CAA0B,CACxBC,mBAAoB,SAAApH,GAAwC,IAArCoB,EAAqCpB,EAArCoB,OAAQiG,EAA6BrH,EAA7BqH,iBAC7B,GAAKA,EAAiBf,MAASe,EAAiBf,KAAKgB,WAArD,CAD0D,IAIlDA,EAAeD,EAAiBf,KAAhCgB,WAGHA,IAGLT,GAA+BzF,EAAQkG,GAGvCX,GAAgBvF,EAAQkG,QJkVvB,SACLtE,GAKOC,IAGLW,GAAsBZ,GItVxBuE,CAA4B,CAC1BH,mBAAoB,SAAA5G,GAAwC,IAArCY,EAAqCZ,EAArCY,OAAQiG,EAA6B7G,EAA7B6G,iBAC7B,GAAKA,EAAiBf,MAASe,EAAiBf,KAAKkB,aAArD,CAD0D,IAIlDA,EAAiBH,EAAiBf,KAAlCkB,aAGHA,GAEL/B,GAAqBrE,EAAQoG,OAI1BN,GCjDIO,GAAiC,SAC5CR,GAEA,ILuNAjE,EKvNMkE,GLuNNlE,EKvNgCiE,ELyNzBhE,IAA2DV,EAAeS,IKpNjF,OAFAS,KAEOyD,uBCPHQ,GAA8C,SAA9BC,8CAAYC,cAA2B,EAAI,yPCGjE,IAAMC,GAAuBC,IAAOC,IAAVC,KACb,SAAAhI,GAAA,OAAAA,EAAGiI,SAA4C,OAAS,SAG/DC,GAAcJ,IAAOC,IAAVI,KACN,SAAA3H,GAAA,OAAAA,EAAG4H,OACF,SAAAxH,GAAA,OAAAA,EAAGwH,OACJ,SAAAC,GAAA,OAAAA,EAAGC,MAA0BC,QAAQC,KAAKP,WAI/CQ,GAAoB,SACxB9G,GAC2D,IACnDqC,EAAqCrC,EAArCqC,SAAU0E,EAA2B/G,EAA3B+G,MAAON,EAAoBzG,EAApByG,MAAOH,EAAatG,EAAbsG,SAE1BU,EAAWC,kBAAgB,GAC3BC,EAAgBD,iBAAuB,MACvCE,EAAiBF,iBAA+B,MAmEtD,OAhEAjE,oBAAU,WACRmE,EAAeC,QAAU,IAAIC,KAAIC,YAAYJ,EAAcE,QAAS,CAMlEG,OAAQ,CACN,CACEC,UAAWH,KAAII,GAAGC,MAClBzJ,QAAS,OAIfkJ,EAAeC,QAAQO,GAAG,cAAe,WACvCX,EAASI,SAAU,IAErBD,EAAeC,QAAQO,GAAG,YAAa,WACrCX,EAASI,SAAU,KAEpB,IAGHpE,oBAAU,WACR,IAAM4E,EAAO,SAAAC,GAAoC,IAAjCC,EAAiCD,EAAjCC,UAEdzF,EAASyF,EAAUC,gBAOrB,OAJIZ,GAAkBA,EAAeC,SACnCD,EAAeC,QAAQO,GAAG,eAAgBC,GAGrC,WACDT,GAAkBA,EAAeC,SACnCD,EAAeC,QAAQY,IAAI,eAAgBJ,KAG9C,CAACvF,IAGJW,oBAAU,WACHmE,GAAmBA,EAAeC,SAKnCD,EAAeC,QAAQL,MAAMe,YAAcf,EAAMkB,gBAGjDjB,EAASI,UAGbD,EAAeC,QAAQL,MAAMe,UAAYf,EAAMkB,iBAC9C,CAAClB,IAGJ/D,oBAAU,WACHmE,GAAmBA,EAAeC,SAGvCD,EAAeC,QAAQc,OAAOzB,IAC7B,CAACA,IAGFxG,EAAAC,EAAAC,cAAAF,EAAAC,EAAAiI,SAAA,KACElI,EAAAC,EAAAC,cAAC+F,GAAD,CAAsBpB,GAAG,yBAAyBsD,IAAKlB,EAAeZ,SAAUA,IAC/EA,GACCrG,EAAAC,EAAAC,cAACoG,GAAD,CAAaE,MAAOA,GAClBxG,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAYC,QAAQ,SAApB,4BAOVuG,GAAkBxD,aAAe,CAC/ByD,MAAO,UACPN,MAAO,IACPH,UAAU,EACVjE,SAAU,cAGGyE,odCvGf,IAAMuB,GAAYlC,IAAOC,IAAVkC,MAKTC,GAAepC,YAAOlD,GAAPkD,CAAHqC,MAOZC,GAAatC,IAAOC,IAAVsC,MAIVC,GAAiBxC,IAAOC,IAAVwC,MA+PLC,GAvPD,SACZ7I,GACqE,IAwIjE8I,EAjHuBC,EArBnBjE,EADU9E,EAAVgJ,MACaC,OAAbnE,GAF6DoE,EAOpCpD,GAA+B,CAC9DqD,YAAa,oBACbC,6BAA6B,EAC7BC,UAAW,CACTvE,QAJIH,EAP6DuE,EAO7DvE,KAAMrF,EAPuD4J,EAOvD5J,MAAOgK,EAPgDJ,EAOhDI,QAPgD7G,EAcvCC,IAAMC,SAAS,IAdwBC,EAAAL,OAAAM,EAAA,EAAAN,CAAAE,EAAA,GAc9D8G,EAd8D3G,EAAA,GAcrD4G,EAdqD5G,EAAA,GAAA6G,EAevC/G,IAAMC,UAAS,GAfwB+G,EAAAnH,OAAAM,EAAA,EAAAN,CAAAkH,EAAA,GAe9DE,EAf8DD,EAAA,GAerDE,EAfqDF,EAAA,GAgB/DG,EF5CoC,SAC1CxI,GAKA,IAAMwI,EAAWzI,GAAoBC,GAMrC,OAFuCqB,IAAMuE,OAAO6C,KAASD,EAAU9D,KAA/DqB,QEkCS2C,GACXC,EAAcrI,KAwHpB,GAAI2H,EACFR,EAAO7I,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAYC,QAAQ,SAApB,mBACF,GAAIjB,IAAUqF,EACnBmE,EAAO7I,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAYC,QAAQ,SAApB,cACF,KACGsE,EAAUF,EAAVE,MACRiE,EACE7I,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAYC,QAAQ,MAAMsE,EAAME,MAChC9E,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAYC,QAAQ,MAApB,sBACAN,EAAAC,EAAAC,cAAC8J,GAAA,EAAD,CACEC,YAAY,iBACZ9H,MAAOmH,EACPxC,MAAM,UACN1E,SApIuD,SAAC8H,GAC9DX,EAAWW,EAAEC,OAAOhI,UAqIhBnC,EAAAC,EAAAC,cAACkK,GAAA,EAAD,CAAQC,SAlIavB,EAkIclE,EAlImC,WAC1E,IAAME,EAAOwE,EAEbM,EAAS,CACPR,UAAW,CAAEvE,GAAIiE,EAAajE,GAAIyF,UAAW,CAAExF,SAC/CyF,mBAAoB,CAClBC,WAAY,WACZZ,SAAStH,OAAAmI,EAAA,EAAAnI,CAAA,CACPkI,WAAY,SACT1B,EACA,CAAEhE,YAGR4F,KAAK,WACNnB,EAAW,QAoHkCzC,MAAM,WAAjD,UAGA9G,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAYC,QAAQ,MAApB,cAAAzC,OAAwC+G,EAAM+F,YAC9C3K,EAAAC,EAAAC,cAACkI,GAAD,KACEpI,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAYC,QAAQ,MAApB,QACAN,EAAAC,EAAAC,cAAC0K,GAAA,EAAD,CACEC,QAASjG,EAAM8C,GACftF,SAxHa,SAAC0G,GAAD,OAAqE,SAC1FoB,GAEA,IAAMxC,EAAKwC,EAAEC,OAAOU,QAEpBjB,EAAS,CACPR,UAAW,CAAEvE,GAAIiE,EAAajE,GAAIyF,UAAW,CAAE5C,OAC/C6C,mBAAoB,CAClBC,WAAY,WACZZ,SAAStH,OAAAmI,EAAA,EAAAnI,CAAA,CACPkI,WAAY,SACT1B,EACA,CAAEpB,WA4GOoD,CAAelG,GACzByB,UAAWzB,EAAM+F,UACjB7D,MAAM,aAGV9G,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAYC,QAAQ,MAApB,eACAN,EAAAC,EAAAC,cAACoI,GAAD,CACEnG,MAAOyC,EAAMmG,WACbC,IAAK,EACLC,IAAK,IACLC,KAAM,EACN9I,SAjHuB,SAAC0G,GAAD,OAA0D,SACvFiC,GAEAnB,EAAS,CACPR,UAAW,CAAEvE,GAAIiE,EAAajE,GAAIyF,UAAW,CAAES,eAC/CR,mBAAoB,CAClBC,WAAY,WACZZ,SAAStH,OAAAmI,EAAA,EAAAnI,CAAA,CACPkI,WAAY,SACT1B,EACA,CAAEiC,mBAuGKI,CAAuBvG,GACjCyB,UAAWzB,EAAM+F,UACjB7D,MAAM,UACNsE,kBAAkB,SAGpBpL,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAYC,QAAQ,MAApB,WACAN,EAAAC,EAAAC,cAACwI,GAAD,KACE1I,EAAAC,EAAAC,cAACmL,GAAD,CACEvE,MAAOlC,EAAMkC,MACb1E,SA3GgB,SAAC0G,GAAD,OAA0D,SAClFhC,GAEA8C,EAAS,CACPR,UAAW,CAAEvE,GAAIiE,EAAajE,GAAIyF,UAAW,CAAExD,UAC/CyD,mBAAoB,CAClBC,WAAY,WACZZ,SAAStH,OAAAmI,EAAA,EAAAnI,CAAA,CACPkI,WAAY,SACT1B,EACA,CAAEhC,cAiGOwE,CAAkB1G,GAC5B4B,MAAO,IACPH,UAAWzB,EAAM+F,aAGrB3K,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAYC,QAAQ,MAApB,mBAAAzC,OAA6C+G,EAAM2G,SACnDvL,EAAAC,EAAAC,cAACsI,GAAD,KACG5D,EAAM4G,kBACL5G,EAAM4G,iBAAiBzM,IACrB,SAAC0M,GAAD,OACEzL,EAAAC,EAAAC,cAACkK,GAAA,EAAD,CACEsB,IAAKD,EACLpF,UAAWzB,EAAM+F,UACjB7D,MAAM,UACNuD,SAxGdkB,EAwG0CE,EAvG1C3C,EAuG2DlE,EAtGrC,WACtBgF,EAAS,CACPR,UAAW,CAAEvE,GAAIiE,EAAajE,GAAIyF,UAAW,CAAEiB,WAC/ChB,mBAAoB,CAClBC,WAAY,WACZZ,SAAStH,OAAAmI,EAAA,EAAAnI,CAAA,CACPkI,WAAY,SACT1B,EACA,CAAEyC,iBAgGIE,GA3GU,IACzBF,EACAzC,KA8GI9I,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAYC,QAAQ,MAApB,iBACAN,EAAAC,EAAAC,cAACoI,GAAD,CACEnG,MAAOyC,EAAM+G,MACbX,IAAK,EACLC,IAAK,EACLC,KAAM,EACN9I,SArGkB,SAAC0G,GAAD,OAA0D,SAClF6C,GAEA/B,EAAS,CACPR,UAAW,CAAEvE,GAAIiE,EAAajE,GAAIyF,UAAW,CAAEqB,UAC/CpB,mBAAoB,CAClBC,WAAY,WACZZ,SAAStH,OAAAmI,EAAA,EAAAnI,CAAA,CACPkI,WAAY,SACT1B,EACA,CAAE6C,cA2FKC,CAAkBhH,GAC5BkC,MAAM,UACNT,UAAWzB,EAAM+F,UACjBS,kBAAkB,OAClBS,OAAK,IAEP7L,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAYC,QAAQ,MAApB,gBACAN,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAYC,QAAQ,SAApB,OAAAzC,OAAoC+G,EAAMC,KAC1C7E,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAYC,QAAQ,SAApB,SAAAzC,OAAsC+G,EAAME,OAC5C9E,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAYC,QAAQ,SAApB,eAAAzC,OAA4C+G,EAAMkH,YAClD9L,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAYC,QAAQ,SAApB,gBAAAzC,OAA6C+G,EAAMmH,aACnD/L,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAYC,QAAQ,SAApB,mBAAAzC,OAAgD+G,EAAMoH,UACtDhM,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAYC,QAAQ,SAApB,aAAAzC,OAA0C+G,EAAMqH,UAChDjM,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAYC,QAAQ,SAApB,YAAAzC,OAAyC+G,EAAMsH,UAC/ClM,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAYC,QAAQ,SAApB,aAAAzC,OAA0C+G,EAAMuH,WAChDnM,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAYC,QAAQ,SAApB,gBAAAzC,OAA6C+G,EAAMwH,aACnDpM,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAYC,QAAQ,SAApB,eAAAzC,OAA4C+G,EAAMyH,YAClDrM,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAYC,QAAQ,MAApB,sBACAN,EAAAC,EAAAC,cAACkK,GAAA,EAAD,CAAQC,QAvGY,SAACvB,GAAD,OAAkD,WAC1EiB,EAAY,CACVX,UAAW,CAAEvE,GAAIiE,EAAajE,IAC9ByH,OAAQ,SAAClI,EAADhG,GAA4C,IAA5BmO,EAA4BnO,EAAlCsG,KAChB,GAAK6H,GAAoBA,EAAgBxC,YAAzC,CAEA,IAAM1F,EAAgBkI,EAAgBxC,YACtClG,GAAqBO,EAAOC,OAE7BqG,KAAK,kBAAYf,GAAW,MA8FV6C,CAAkB5H,GAAQkC,MAAM,WAAjD,WAON,OACE9G,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,GAAG,KACPJ,EAAAC,EAAAC,cAACkK,GAAA,EAAD,KAAS,WAEVvB,EACAa,GAAW1J,EAAAC,EAAAC,cAACuM,EAAA,EAAD,CAAUC,MAAI,EAACtM,GAAG,2HC/QpC,IAAMgI,GAAYlC,IAAOC,IAAVwG,MAgFAC,GA3EE,WAA0C,IT2RzDxL,ES/OIyH,EA5CqDrG,EACzBC,IAAMC,SAAS,IADUC,EAAAL,OAAAM,EAAA,EAAAN,CAAAE,EAAA,GAClDqK,EADkDlK,EAAA,GACxCmK,EADwCnK,EAAA,GAEnDoK,ET2RC1L,IACLC,GACAF,GS/RuD4L,ETgPpD,SACL5L,GAEA,OAAOC,IACLN,GACAK,GSlP+B6L,CAAyB,CACxD/D,YAAa,eACbgE,aAAc,MAFRxI,EAHiDsI,EAGjDtI,KAAM2E,EAH2C2D,EAG3C3D,QAAShK,EAHkC2N,EAGlC3N,MA2DvB,OAhBEwJ,EADEQ,EACKrJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAYC,QAAQ,SAApB,cACEjB,EACFW,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAYC,QAAQ,SAApB,SACGoE,GAASA,EAAKS,kBAAqBT,EAAKS,iBAAiBgI,OAG5DzI,EAAKS,iBAAiBpG,IAC3B,SAAC6F,GAAD,OACE5E,EAAAC,EAAAC,cAACkN,GAAD,CAAW1B,IAAK9G,EAAMC,IACpB7E,EAAAC,EAAAC,cAACkK,GAAA,EAAD,CAAQC,SA3CQxF,EA2CgBD,EAAMC,GA3CkB,WAC9DkI,EAAS,CACP3D,UAAW,CAAEvE,MACbyH,OAAQ,SAAClI,EAADhG,GAAyC,IAAzBiP,EAAyBjP,EAA/BsG,KAChB,GAAK2I,GAAiBA,EAAaN,SAAnC,CACA,IAAM/H,EAAaqI,EAAaN,SAMhC9H,GAA+Bb,EAAOY,GACtCD,GAAgBX,EAAOY,UA+BrB,OACAhF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAYC,QAAQ,SAASsE,EAAMC,KA5CpB,IAACA,IAsCf7E,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAYC,QAAQ,SAApB,QAaPN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAYC,QAAQ,MAApB,aACAN,EAAAC,EAAAC,cAACkN,GAAD,KACEpN,EAAAC,EAAAC,cAACkK,GAAA,EAAD,CAAQC,QArCwC,WACpD0C,EAAS,CACP3D,UAAW,CAAEvE,GAAIgI,GACjBP,OAAQ,SAAClI,EAADxF,GAAyC,IAAzByO,EAAyBzO,EAA/B8F,KAChB,GAAK2I,GAAiBA,EAAaN,SAAnC,CACA,IAAM/H,EAAaqI,EAAaN,SAEhC9H,GAA+Bb,EAAOY,GACtCD,GAAgBX,EAAOY,OAExB0F,KAAK,WACNoC,EAAY,QA0BV,OACA9M,EAAAC,EAAAC,cAAC8J,GAAA,EAAD,CAAWC,YAAY,eAAe9H,MAAO0K,EAAUzK,SA3DI,SAAC8H,GAChE4C,EAAY5C,EAAEC,OAAOhI,WA4DnBnC,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAYC,QAAQ,MAApB,qBACCuI,IC9EQyE,GAFD,kBAA0CtN,EAAAC,EAAAC,cAAA,sKCOxD,IAAMkI,GAAYlC,IAAOC,IAAVoH,MA6FAC,GAxFF,WAA0C,IAoDjD3E,EApDiD4E,EAIIrI,GAAgC,CACvF8D,YAAa,oBACbC,6BAA6B,IAFvBzE,EAJ6C+I,EAI7C/I,KAAMrF,EAJuCoO,EAIvCpO,MAAOgK,EAJgCoE,EAIhCpE,QAASqE,EAJuBD,EAIvBC,cAAeC,EAJQF,EAIRE,QAKvC5D,EAAcrI,KACdkI,EAAWzI,KAeXyM,EAAoB,SAAChJ,GAAD,OAAwD,SAACsF,GACjF,IAAMxC,EAAKwC,EAAEC,OAAOU,QAEpBjB,EAAS,CACPR,UAAW,CAAEvE,GAAID,EAAMC,GAAIyF,UAAW,CAAE5C,OACxC6C,mBAAoB,CAClBC,WAAY,WACZZ,SAAStH,OAAAmI,EAAA,EAAAnI,CAAA,CACPkI,WAAY,SACT5F,EACA,CAAE8C,YAMPmG,EAAa,eAAAjP,EAAA0D,OAAAwL,GAAA,EAAAxL,CAAAyL,GAAA9N,EAAA+N,KAAG,SAAAC,IAAA,OAAAF,GAAA9N,EAAAiO,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEhBhP,EAGFhC,OAAOC,SAASgR,SAEhBX,IAPkB,wBAAAQ,EAAAI,SAAAN,MAAH,yBAAArP,EAAA4P,MAAAC,KAAAC,YAAA,GAqCnB,OAxBE7F,EADEQ,GAA6B,IAAlBqE,EACN1N,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAYC,QAAQ,SAApB,cACEjB,EACFW,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAYC,QAAQ,SAApB,UACGoE,GAASA,EAAKF,QAAWE,EAAKF,OAAO2I,OAGxCzI,EAAKF,OAAOzF,IACjB,SAAC6F,GAAD,OACE5E,EAAAC,EAAAC,cAACyO,GAAD,CAAWjD,IAAK9G,EAAMC,IACpB7E,EAAAC,EAAAC,cAACkK,GAAA,EAAD,CAAQC,SAnDWxF,EAmDgBD,EAAMC,GAnDY,WAC3DkF,EAAY,CACVX,UAAW,CAAEvE,MACbyH,OAAQ,SAAClI,EAADhG,GAA4C,IAA5BmO,EAA4BnO,EAAlCsG,KAChB,GAAK6H,GAAoBA,EAAgBxC,YAAzC,CAEA,IAAM1F,EAAgBkI,EAAgBxC,YACtClG,GAAqBO,EAAOC,UA4C1B,UACArE,EAAAC,EAAAC,cAAC0K,GAAA,EAAD,CACEC,QAASjG,EAAM8C,GACftF,SAAUwL,EAAkBhJ,GAC5ByB,UAAWzB,EAAM+F,UACjB7D,MAAM,YAER9G,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,GAAE,UAAAvC,OAAY+G,EAAMC,KACxB7E,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAYC,QAAQ,SAASsE,EAAME,QA3DnB,IAACD,IA8ClB7E,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAYC,QAAQ,SAApB,QAqBPN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAYC,QAAQ,MAApB,UACAN,EAAAC,EAAAC,cAACkK,GAAA,EAAD,CAAQC,QAASwD,GAAjB,WACA7N,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAYC,QAAQ,MAApB,cACCuI,ICjFDnC,GAAQkI,cA2BCC,GAzBH,kBACV7O,EAAAC,EAAAC,cAAC4O,EAAA,EAAD,CAAgBtP,OAAQA,GACtBQ,EAAAC,EAAAC,cAAC6O,EAAA,EAAD,CAAgBC,aAAW,GACzBhP,EAAAC,EAAAC,cAAC+O,EAAA,EAAD,CAAevI,MAAOA,IACpB1G,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACgP,EAAA,EAAD,MACAlP,EAAAC,EAAAC,cAACiP,EAAA,EAAD,CAAQC,SAAS,UACfpP,EAAAC,EAAAC,cAACmP,EAAA,EAAD,CAAMlN,OAAO,GACXnC,EAAAC,EAAAC,cAACoP,EAAA,EAAD,CAAKC,MAAM,OAAOhI,UAAWiI,IAAMpP,GAAG,MACtCJ,EAAAC,EAAAC,cAACoP,EAAA,EAAD,CAAKC,MAAM,YAAYhI,UAAWiI,IAAMpP,GAAG,eAC3CJ,EAAAC,EAAAC,cAACoP,EAAA,EAAD,CAAKC,MAAM,QAAQhI,UAAWiI,IAAMpP,GAAG,cAG3CJ,EAAAC,EAAAC,cAACuM,EAAA,EAAD,KACEzM,EAAAC,EAAAC,cAACuM,EAAA,EAAD,CAAOtN,KAAK,IAAIsQ,OAAK,EAAClI,UAAWiG,KACjCxN,EAAAC,EAAAC,cAACuM,EAAA,EAAD,CAAOtN,KAAK,UAAUsQ,OAAK,EAAClI,UAAW+F,KACvCtN,EAAAC,EAAAC,cAACuM,EAAA,EAAD,CAAOtN,KAAK,aAAasQ,OAAK,EAAClI,UAAWqF,KAC1C5M,EAAAC,EAAAC,cAACuM,EAAA,EAAD,CAAOtN,KAAK,aAAasQ,OAAK,EAAClI,UAAWqB,KAC1C5I,EAAAC,EAAAC,cAACuM,EAAA,EAAD,CAAOlF,UAAWzH,UChC9B4P,IAASC,OAAO3P,EAAAC,EAAAC,cAAC0P,GAAD,MAASC,SAASC,eAAe","file":"static/js/main.961b12fe.chunk.js","sourcesContent":["// eslint-disable-next-line eslint-comments/disable-enable-pair\n/* eslint-disable no-console */\n// Apollo imports\nimport { ApolloClient } from \"apollo-client\"; // Base Apollo\nimport { InMemoryCache } from \"apollo-cache-inmemory\"; // Local Cache Storage\nimport { ApolloLink, split } from \"apollo-link\"; // Handles and manages the different apollo-link packages\nimport { HttpLink } from \"apollo-link-http\"; // Use Apollo Over HTTP (Queries, Mutations)\nimport { WebSocketLink } from \"apollo-link-ws\"; // Use Apollo Over Websockets (Subscriptions)\nimport { onError } from \"apollo-link-error\"; // Do custom logic when a GraphQL or network error occurs\nimport { getMainDefinition } from \"apollo-utilities\"; // Aids with splitting links\n\nconst serverName = window.location.host;\nconst wsProtocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n\n// Create an http link:\nconst httpLink = new HttpLink({\n  uri: `${window.location.protocol}//${serverName}/graphql`,\n});\n\n// Create a WebSocket link:\nconst wsLink = new WebSocketLink({\n  uri: `${wsProtocol}//${serverName}/graphql`,\n  options: {\n    reconnect: true,\n    // For authentication over websockets\n    // connectionParams: {\n    //   authToken: user.authToken,\n    // },\n  },\n});\n\n// This link will handle sending out HTTP and WS requests\nconst HTTP_WS_LINK = split(\n  // Split the links so your query and mutations go to the apollo-link-http while subscriptions go to apollo-link-ws\n  ({ query }): boolean => {\n    const definition = getMainDefinition(query);\n    return definition.kind === \"OperationDefinition\" && definition.operation === \"subscription\";\n  },\n  wsLink,\n  httpLink\n);\n\n// This link does custom logic when a GraphQL or network error occurs\nconst ON_ERROR_LINK = onError(({ graphQLErrors, networkError }): void => {\n  if (graphQLErrors)\n    graphQLErrors.map(({ message, locations, path }): void =>\n      console.error(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`)\n    );\n  if (networkError) console.error(`[Network error]: ${networkError}`);\n});\n\nconst CACHE = new InMemoryCache();\n\n// Point apollo towards graphql server\nexport const client = new ApolloClient({\n  link: ApolloLink.from([ON_ERROR_LINK, HTTP_WS_LINK]),\n  cache: CACHE,\n});\n","import React from \"react\";\nimport { Link, RouteComponentProps } from \"react-router-dom\";\nimport Typography from \"@material-ui/core/Typography\";\n\n// TODO: Make Into Empty State Page\nconst NotFound = (\n  props: RouteComponentProps\n): React.FunctionComponentElement<RouteComponentProps> => {\n  const { location } = props;\n  return (\n    <div>\n      <Link to=\"/\">\n        <Typography variant=\"body1\">{\"< Back to Home\"}</Typography>\n      </Link>\n      <Typography variant=\"h2\">{`No Match For ${location.pathname}`}</Typography>\n    </div>\n  );\n};\n\nexport default NotFound;\nexport interface NotFound extends ReturnType<typeof NotFound> {}\n","// !!! THIS FILE WAS GENERATED BY GRAPHQL-CODEGEN !!!\n// !!!    DO NOT MODIFY THIS FILE BY YOURSELF     !!!\nimport gql from \"graphql-tag\";\nimport * as ReactApolloHooks from \"react-apollo-hooks\";\nimport * as ReactApollo from \"react-apollo\";\n\nexport type Maybe<T> = T | null;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\n/** Object representing a Light */\nexport type Light = {\n  __typename?: \"Light\";\n  id: Scalars[\"ID\"];\n  /** The display name of the Light */\n  name: Scalars[\"String\"];\n  /** Whether the light is connected to the MQTT broker or not */\n  connected: Scalars[\"Boolean\"];\n  /** Whether the light is switched on or not */\n  on: Scalars[\"Boolean\"];\n  /** The brightness of the light as a percentage from 0-100 */\n  brightness: Scalars[\"Int\"];\n  /** The current color of the light in hexadecimal notation */\n  color: Scalars[\"String\"];\n  /** The currently playing effect of the light */\n  effect: Scalars[\"String\"];\n  /** The speed of the currently playing effect from 1-7 */\n  speed: Scalars[\"Int\"];\n  /** The list of effects the light can play */\n  supportedEffects: Array<Scalars[\"String\"]>;\n  /** The IP Address of the light's controller */\n  ipAddress: Scalars[\"String\"];\n  /** The MAC Address of the light's controller */\n  macAddress: Scalars[\"String\"];\n  /** The number of LEDs the light has */\n  numLeds: Scalars[\"Int\"];\n  /** The UDP port the light is listening on for music visualization data */\n  udpPort: Scalars[\"Int\"];\n  /** The firmware version the light's controller is running */\n  version: Scalars[\"String\"];\n  /** The hardware of the light's controller */\n  hardware: Scalars[\"String\"];\n  /** The order of colors the light strip runs on ex: RGB, GRB, BGR */\n  colorOrder: Scalars[\"String\"];\n  /** The type of LED strip the light is ex: WS2812B, APA102 */\n  stripType: Scalars[\"String\"];\n};\n\nexport type LightInput = {\n  /** Set the display name of the light */\n  name?: Maybe<Scalars[\"String\"]>;\n  /** Power the light on or off */\n  on?: Maybe<Scalars[\"Boolean\"]>;\n  /** Change the brightness of the light (a value 0-100) */\n  brightness?: Maybe<Scalars[\"Int\"]>;\n  /** Change the color of the light (must be in hexadecimal format) */\n  color?: Maybe<Scalars[\"String\"]>;\n  /** Change the currently playing effect of the light */\n  effect?: Maybe<Scalars[\"String\"]>;\n  /** Change the speed of the light (a value 1-7) */\n  speed?: Maybe<Scalars[\"Int\"]>;\n};\n\nexport type Mutation = {\n  __typename?: \"Mutation\";\n  /** Change some of the light's data (use setLightState to change the state) */\n  setLight: Light;\n  /** Add a new light */\n  addLight: Light;\n  /** Remove a currently added light */\n  removeLight: Light;\n};\n\nexport type MutationSetLightArgs = {\n  lightData: LightInput;\n  id: Scalars[\"String\"];\n};\n\nexport type MutationAddLightArgs = {\n  id: Scalars[\"String\"];\n};\n\nexport type MutationRemoveLightArgs = {\n  id: Scalars[\"String\"];\n};\n\nexport type Query = {\n  __typename?: \"Query\";\n  /** Get a light by it's ID */\n  light: Light;\n  /** Get all currently added lights in the order they were added */\n  lights: Array<Light>;\n  /** Get all currently added lights in the order they were added */\n  discoveredLights: Array<Light>;\n};\n\nexport type QueryLightArgs = {\n  id: Scalars[\"String\"];\n};\n\nexport type Subscription = {\n  __typename?: \"Subscription\";\n  lightChanged: Light;\n  lightAdded: Light;\n  lightRemoved: Light;\n};\nexport type LightFieldsFragment = { __typename?: \"Light\" } & Pick<\n  Light,\n  | \"id\"\n  | \"name\"\n  | \"connected\"\n  | \"on\"\n  | \"brightness\"\n  | \"color\"\n  | \"effect\"\n  | \"speed\"\n  | \"supportedEffects\"\n  | \"ipAddress\"\n  | \"macAddress\"\n  | \"numLeds\"\n  | \"udpPort\"\n  | \"version\"\n  | \"hardware\"\n  | \"colorOrder\"\n  | \"stripType\"\n>;\n\nexport type LightQueryVariables = {\n  id: Scalars[\"String\"];\n};\n\nexport type LightQuery = { __typename?: \"Query\" } & {\n  light: { __typename?: \"Light\" } & LightFieldsFragment;\n};\n\nexport type LightsQueryVariables = {};\n\nexport type LightsQuery = { __typename?: \"Query\" } & {\n  lights: Array<{ __typename?: \"Light\" } & LightFieldsFragment>;\n};\n\nexport type DiscoveredLightsQueryVariables = {};\n\nexport type DiscoveredLightsQuery = { __typename?: \"Query\" } & {\n  discoveredLights: Array<{ __typename?: \"Light\" } & LightFieldsFragment>;\n};\n\nexport type SetLightMutationVariables = {\n  id: Scalars[\"String\"];\n  lightData: LightInput;\n};\n\nexport type SetLightMutation = { __typename?: \"Mutation\" } & {\n  setLight: { __typename?: \"Light\" } & LightFieldsFragment;\n};\n\nexport type AddLightMutationVariables = {\n  id: Scalars[\"String\"];\n};\n\nexport type AddLightMutation = { __typename?: \"Mutation\" } & {\n  addLight: { __typename?: \"Light\" } & LightFieldsFragment;\n};\n\nexport type RemoveLightMutationVariables = {\n  id: Scalars[\"String\"];\n};\n\nexport type RemoveLightMutation = { __typename?: \"Mutation\" } & {\n  removeLight: { __typename?: \"Light\" } & LightFieldsFragment;\n};\n\nexport type LightChangedSubscriptionVariables = {};\n\nexport type LightChangedSubscription = { __typename?: \"Subscription\" } & {\n  lightChanged: { __typename?: \"Light\" } & LightFieldsFragment;\n};\n\nexport type LightAddedSubscriptionVariables = {};\n\nexport type LightAddedSubscription = { __typename?: \"Subscription\" } & {\n  lightAdded: { __typename?: \"Light\" } & LightFieldsFragment;\n};\n\nexport type LightRemovedSubscriptionVariables = {};\n\nexport type LightRemovedSubscription = { __typename?: \"Subscription\" } & {\n  lightRemoved: { __typename?: \"Light\" } & LightFieldsFragment;\n};\nexport const lightFieldsFragmentDoc = gql`\n  fragment lightFields on Light {\n    id\n    name\n    connected\n    on\n    brightness\n    color\n    effect\n    speed\n    supportedEffects\n    ipAddress\n    macAddress\n    numLeds\n    udpPort\n    version\n    hardware\n    colorOrder\n    stripType\n  }\n`;\nexport const LightDocument = gql`\n  query light($id: String!) {\n    light(id: $id) {\n      ...lightFields\n    }\n  }\n  ${lightFieldsFragmentDoc}\n`;\n\nexport function useLightQuery(\n  baseOptions?: ReactApolloHooks.QueryHookOptions<LightQueryVariables>\n) {\n  return ReactApolloHooks.useQuery<LightQuery, LightQueryVariables>(LightDocument, baseOptions);\n}\nexport const LightsDocument = gql`\n  query lights {\n    lights {\n      ...lightFields\n    }\n  }\n  ${lightFieldsFragmentDoc}\n`;\n\nexport function useLightsQuery(\n  baseOptions?: ReactApolloHooks.QueryHookOptions<LightsQueryVariables>\n) {\n  return ReactApolloHooks.useQuery<LightsQuery, LightsQueryVariables>(LightsDocument, baseOptions);\n}\nexport const DiscoveredLightsDocument = gql`\n  query discoveredLights {\n    discoveredLights {\n      ...lightFields\n    }\n  }\n  ${lightFieldsFragmentDoc}\n`;\n\nexport function useDiscoveredLightsQuery(\n  baseOptions?: ReactApolloHooks.QueryHookOptions<DiscoveredLightsQueryVariables>\n) {\n  return ReactApolloHooks.useQuery<DiscoveredLightsQuery, DiscoveredLightsQueryVariables>(\n    DiscoveredLightsDocument,\n    baseOptions\n  );\n}\nexport const SetLightDocument = gql`\n  mutation setLight($id: String!, $lightData: LightInput!) {\n    setLight(id: $id, lightData: $lightData) {\n      ...lightFields\n    }\n  }\n  ${lightFieldsFragmentDoc}\n`;\nexport type SetLightMutationFn = ReactApollo.MutationFn<\n  SetLightMutation,\n  SetLightMutationVariables\n>;\n\nexport function useSetLightMutation(\n  baseOptions?: ReactApolloHooks.MutationHookOptions<SetLightMutation, SetLightMutationVariables>\n) {\n  return ReactApolloHooks.useMutation<SetLightMutation, SetLightMutationVariables>(\n    SetLightDocument,\n    baseOptions\n  );\n}\nexport const AddLightDocument = gql`\n  mutation addLight($id: String!) {\n    addLight(id: $id) {\n      ...lightFields\n    }\n  }\n  ${lightFieldsFragmentDoc}\n`;\nexport type AddLightMutationFn = ReactApollo.MutationFn<\n  AddLightMutation,\n  AddLightMutationVariables\n>;\n\nexport function useAddLightMutation(\n  baseOptions?: ReactApolloHooks.MutationHookOptions<AddLightMutation, AddLightMutationVariables>\n) {\n  return ReactApolloHooks.useMutation<AddLightMutation, AddLightMutationVariables>(\n    AddLightDocument,\n    baseOptions\n  );\n}\nexport const RemoveLightDocument = gql`\n  mutation removeLight($id: String!) {\n    removeLight(id: $id) {\n      ...lightFields\n    }\n  }\n  ${lightFieldsFragmentDoc}\n`;\nexport type RemoveLightMutationFn = ReactApollo.MutationFn<\n  RemoveLightMutation,\n  RemoveLightMutationVariables\n>;\n\nexport function useRemoveLightMutation(\n  baseOptions?: ReactApolloHooks.MutationHookOptions<\n    RemoveLightMutation,\n    RemoveLightMutationVariables\n  >\n) {\n  return ReactApolloHooks.useMutation<RemoveLightMutation, RemoveLightMutationVariables>(\n    RemoveLightDocument,\n    baseOptions\n  );\n}\nexport const LightChangedDocument = gql`\n  subscription lightChanged {\n    lightChanged {\n      ...lightFields\n    }\n  }\n  ${lightFieldsFragmentDoc}\n`;\n\nexport function useLightChangedSubscription(\n  baseOptions?: ReactApolloHooks.SubscriptionHookOptions<\n    LightChangedSubscription,\n    LightChangedSubscriptionVariables\n  >\n) {\n  return ReactApolloHooks.useSubscription<\n    LightChangedSubscription,\n    LightChangedSubscriptionVariables\n  >(LightChangedDocument, baseOptions);\n}\nexport const LightAddedDocument = gql`\n  subscription lightAdded {\n    lightAdded {\n      ...lightFields\n    }\n  }\n  ${lightFieldsFragmentDoc}\n`;\n\nexport function useLightAddedSubscription(\n  baseOptions?: ReactApolloHooks.SubscriptionHookOptions<\n    LightAddedSubscription,\n    LightAddedSubscriptionVariables\n  >\n) {\n  return ReactApolloHooks.useSubscription<LightAddedSubscription, LightAddedSubscriptionVariables>(\n    LightAddedDocument,\n    baseOptions\n  );\n}\nexport const LightRemovedDocument = gql`\n  subscription lightRemoved {\n    lightRemoved {\n      ...lightFields\n    }\n  }\n  ${lightFieldsFragmentDoc}\n`;\n\nexport function useLightRemovedSubscription(\n  baseOptions?: ReactApolloHooks.SubscriptionHookOptions<\n    LightRemovedSubscription,\n    LightRemovedSubscriptionVariables\n  >\n) {\n  return ReactApolloHooks.useSubscription<\n    LightRemovedSubscription,\n    LightRemovedSubscriptionVariables\n  >(LightRemovedDocument, baseOptions);\n}\n","import React, { ChangeEvent } from \"react\";\nimport Slider, { SliderProps } from \"@material-ui/core/Slider\";\nimport { isArray } from \"util\";\n\ninterface SmoothSliderProps extends Omit<SliderProps, \"value\" | \"onChange\"> {\n  value: number;\n  onChange: (value: number) => void;\n}\n\nconst SmoothSlider = (\n  props: SmoothSliderProps\n): React.FunctionComponentElement<SmoothSliderProps> => {\n  const { value, onChange, ...other } = props;\n  const [internalValue, setInternalValue] = React.useState(value);\n\n  // TODO: Figure out how to make a smooth animation when updating brightness through subscriptions\n  React.useEffect((): void => {\n    setInternalValue(value);\n  }, [value]); // Only re-run the effect if count changes\n\n  const handleChange = (_: ChangeEvent<{}>, newValue: number | number[]): void => {\n    if (isArray(newValue)) return;\n    if (internalValue === newValue) return;\n    setInternalValue(newValue);\n    onChange(newValue);\n  };\n\n  return <Slider value={internalValue} onChange={handleChange} {...other} />;\n};\n\nSmoothSlider.defaultProps = {\n  onChange: (): void => {},\n};\n\nexport default SmoothSlider;\n","import gql from \"graphql-tag\";\n\nconst LIGHT_FIELDS = gql`\n  fragment lightFields on Light {\n    id\n    name\n    connected\n    on\n    brightness\n    color\n    effect\n    speed\n    supportedEffects\n    ipAddress\n    macAddress\n    numLeds\n    udpPort\n    version\n    hardware\n    colorOrder\n    stripType\n  }\n`;\n\nexport const LIGHT = gql`\n  query light($id: String!) {\n    light(id: $id) {\n      ...lightFields\n    }\n  }\n  ${LIGHT_FIELDS}\n`;\n\nexport const LIGHTS = gql`\n  query lights {\n    lights {\n      ...lightFields\n    }\n  }\n  ${LIGHT_FIELDS}\n`;\n\nexport const DISCOVERED_LIGHTS = gql`\n  query discoveredLights {\n    discoveredLights {\n      ...lightFields\n    }\n  }\n  ${LIGHT_FIELDS}\n`;\n\nexport const SET_LIGHT = gql`\n  mutation setLight($id: String!, $lightData: LightInput!) {\n    setLight(id: $id, lightData: $lightData) {\n      ...lightFields\n    }\n  }\n  ${LIGHT_FIELDS}\n`;\n\nexport const ADD_LIGHT = gql`\n  mutation addLight($id: String!) {\n    addLight(id: $id) {\n      ...lightFields\n    }\n  }\n  ${LIGHT_FIELDS}\n`;\n\nexport const REMOVE_LIGHT = gql`\n  mutation removeLight($id: String!) {\n    removeLight(id: $id) {\n      ...lightFields\n    }\n  }\n  ${LIGHT_FIELDS}\n`;\n\nexport const LIGHT_CHANGED = gql`\n  subscription lightChanged {\n    lightChanged {\n      ...lightFields\n    }\n  }\n  ${LIGHT_FIELDS}\n`;\n\nexport const LIGHT_ADDED = gql`\n  subscription lightAdded {\n    lightAdded {\n      ...lightFields\n    }\n  }\n  ${LIGHT_FIELDS}\n`;\n\nexport const LIGHT_REMOVED = gql`\n  subscription lightRemoved {\n    lightRemoved {\n      ...lightFields\n    }\n  }\n  ${LIGHT_FIELDS}\n`;\n","import { Light, LightsQuery, DiscoveredLightsQuery } from \"generated/graphql\";\nimport { DataProxy } from \"apollo-cache\";\nimport { LIGHTS, DISCOVERED_LIGHTS } from \"./graphqlConstants\";\n\nexport const removeLightFromCache = (proxy: DataProxy, lightToRemove: Light): void => {\n  try {\n    const result = proxy.readQuery<LightsQuery>({\n      query: LIGHTS,\n    });\n    if (!result || !result.lights) return;\n    const { lights } = result;\n\n    proxy.writeQuery({\n      query: LIGHTS,\n      data: {\n        lights: lights.filter((light): boolean => light.id !== lightToRemove.id),\n      },\n    });\n  } catch (error) {\n    // If there is an invariant error, this shouldnt be an issue so ignore it\n    if (error.name === \"Invariant Violation\") return;\n    throw error;\n  }\n};\n\nexport const addLightToCache = (proxy: DataProxy, lightToAdd: Light): void => {\n  try {\n    const result = proxy.readQuery<LightsQuery>({\n      query: LIGHTS,\n    });\n    if (!result || !result.lights) return;\n    const { lights } = result;\n\n    proxy.writeQuery({\n      query: LIGHTS,\n      data: { lights: lights.concat([lightToAdd]) },\n    });\n  } catch (error) {\n    // If there is an invariant error, this shouldnt be an issue so ignore it\n    if (error.name === \"Invariant Violation\") return;\n    throw error;\n  }\n};\n\nexport const removeDiscoveredLightFromCache = (\n  proxy: DataProxy,\n  discoveredLightToRemove: Light\n): void => {\n  try {\n    const result = proxy.readQuery<DiscoveredLightsQuery>({\n      query: DISCOVERED_LIGHTS,\n    });\n    if (!result || !result.discoveredLights) return;\n    const { discoveredLights } = result;\n\n    proxy.writeQuery({\n      query: DISCOVERED_LIGHTS,\n      data: {\n        discoveredLights: discoveredLights.filter(\n          (light): boolean => light.id !== discoveredLightToRemove.id\n        ),\n      },\n    });\n  } catch (error) {\n    // If there is an invariant error, this shouldnt be an issue so ignore it\n    if (error.name === \"Invariant Violation\") return;\n    throw error;\n  }\n};\n","import {\n  useLightsQuery,\n  LightsQuery,\n  LightsQueryVariables,\n  useLightChangedSubscription,\n  useLightAddedSubscription,\n  useLightRemovedSubscription,\n} from \"generated/graphql\";\nimport { QueryHookResult, QueryHookOptions } from \"react-apollo-hooks\";\nimport {\n  removeDiscoveredLightFromCache,\n  addLightToCache,\n  removeLightFromCache,\n} from \"lib/graphqlHelpers\";\n\nexport const useLightsQueryWithSubscriptions = (\n  queryOptions?: QueryHookOptions<LightsQueryVariables, object>\n): QueryHookResult<LightsQuery, LightsQueryVariables> => {\n  const QueryData = useLightsQuery(queryOptions);\n\n  // This will automatically update the light in the cache when it gets a message\n  useLightChangedSubscription();\n\n  // This will automatically add lights to the cache when it gets a message\n  useLightAddedSubscription({\n    onSubscriptionData: ({ client, subscriptionData }): void => {\n      if (!subscriptionData.data || !subscriptionData.data.lightAdded) {\n        return;\n      }\n      const { lightAdded } = subscriptionData.data;\n\n      // If no data was returned, do nothing\n      if (!lightAdded) return;\n\n      // Remove the added light from discoveredLights\n      removeDiscoveredLightFromCache(client, lightAdded);\n\n      // Add the light to LIGHTS\n      addLightToCache(client, lightAdded);\n    },\n  });\n\n  // This will automatically remove lights from the cache when it gets a message\n  useLightRemovedSubscription({\n    onSubscriptionData: ({ client, subscriptionData }): void => {\n      if (!subscriptionData.data || !subscriptionData.data.lightRemoved) {\n        return;\n      }\n      const { lightRemoved } = subscriptionData.data;\n\n      // If no data was returned, do nothing\n      if (!lightRemoved) return;\n\n      removeLightFromCache(client, lightRemoved);\n    },\n  });\n\n  return QueryData;\n};\n","import {\n  useLightQuery,\n  LightQuery,\n  LightQueryVariables,\n  useLightChangedSubscription,\n} from \"generated/graphql\";\nimport { QueryHookResult, QueryHookOptions } from \"react-apollo-hooks\";\n\nexport const useLightQueryWithSubscriptions = (\n  queryOptions?: QueryHookOptions<LightQueryVariables, object>\n): QueryHookResult<LightQuery, LightQueryVariables> => {\n  const QueryData = useLightQuery(queryOptions);\n\n  // This will automatically update the light in the cache when it gets a message\n  useLightChangedSubscription();\n\n  return QueryData;\n};\n","import React from \"react\";\nimport {\n  useSetLightMutation,\n  SetLightMutation,\n  SetLightMutationVariables,\n} from \"generated/graphql\";\nimport throttle from \"lodash.throttle\";\nimport { MutationFn, MutationHookOptions } from \"react-apollo-hooks\";\n\nconst throttleSpeed = process.env.REACT_APP_ENV === \"test\" ? 0 : 500;\n\nexport const useThrottledSetLightMutation = (\n  baseOptions?: MutationHookOptions<SetLightMutation, SetLightMutationVariables, object> | undefined\n): MutationFn<SetLightMutation, SetLightMutationVariables> & {\n  cancel(): void;\n  flush(): void;\n} => {\n  const setLight = useSetLightMutation(baseOptions);\n\n  // Use a ref here to store the value of setLightState so that it doesn't change on rerenders.\n  // This is necessary for lodash throttle to function properly\n  const { current: throttledSetLight } = React.useRef(throttle(setLight, throttleSpeed));\n\n  return throttledSetLight;\n};\n","import React, { useEffect, useRef } from \"react\";\nimport iro from \"@jaames/iro\";\nimport styled from \"styled-components\";\nimport { Typography } from \"@material-ui/core\";\n\nexport interface CircleColorPickerProps {\n  color: string;\n  width: number;\n  disabled: boolean;\n  onChange: (color: string) => void;\n}\n\nconst ColorPickerContainer = styled.div<{ disabled: boolean }>`\n  display: ${({ disabled }): \"none\" | \"flex\" => (disabled ? \"none\" : \"flex\")};\n`;\n\nconst DisabledDiv = styled.div<{ width: number }>`\n  width: ${({ width }): number => width}px;\n  height: ${({ width }): number => width}px;\n  color: ${({ theme }): string => theme.palette.text.disabled};\n  text-align: center;\n`;\n\nconst CircleColorPicker = (\n  props: CircleColorPickerProps\n): React.FunctionComponentElement<CircleColorPickerProps> => {\n  const { onChange, color, width, disabled } = props;\n\n  const inUseRef = useRef<boolean>(false);\n  const colorPickerEl = useRef<HTMLDivElement>(null);\n  const iroColorPicker = useRef<iro.ColorPicker | null>(null);\n\n  // Initialize the color picker\n  useEffect((): void => {\n    iroColorPicker.current = new iro.ColorPicker(colorPickerEl.current, {\n      // Set the size of the color picker\n      // width,\n      // Set the initial color to pure red\n      // color,\n      // Only use the color wheel\n      layout: [\n        {\n          component: iro.ui.Wheel,\n          options: {},\n        },\n      ],\n    });\n    iroColorPicker.current.on(\"input:start\", (): void => {\n      inUseRef.current = true;\n    });\n    iroColorPicker.current.on(\"input:end\", (): void => {\n      inUseRef.current = false;\n    });\n  }, []);\n\n  // Reassign the onChange function if it changes\n  useEffect((): (() => void) => {\n    const test = ({ hexString }: iro.Color): void => {\n      // hexString from iro.js is always lowercase but the API should always return uppercase\n      onChange(hexString.toUpperCase());\n    };\n\n    if (iroColorPicker && iroColorPicker.current) {\n      iroColorPicker.current.on(\"input:change\", test);\n    }\n\n    return (): void => {\n      if (iroColorPicker && iroColorPicker.current) {\n        iroColorPicker.current.off(\"input:change\", test);\n      }\n    };\n  }, [onChange]);\n\n  // Reassign the colorpicker's color if the color prop changes and the picker is not currently being used\n  useEffect((): void => {\n    if (!iroColorPicker || !iroColorPicker.current) {\n      return;\n    }\n    // Don't reassign the color if it hasn't changed\n    // We need to do this to prevent accidentally calling the input:change event twice\n    if (iroColorPicker.current.color.hexString === color.toLowerCase()) {\n      return;\n    }\n    if (inUseRef.current) {\n      return;\n    }\n    iroColorPicker.current.color.hexString = color.toLowerCase();\n  }, [color]);\n\n  // Resize the colorpicker if the width prop changes\n  useEffect((): void => {\n    if (!iroColorPicker || !iroColorPicker.current) {\n      return;\n    }\n    iroColorPicker.current.resize(width);\n  }, [width]);\n\n  return (\n    <>\n      <ColorPickerContainer id=\"color-picker-container\" ref={colorPickerEl} disabled={disabled} />\n      {disabled && (\n        <DisabledDiv width={width}>\n          <Typography variant=\"body1\">Color Picker Disabled</Typography>\n        </DisabledDiv>\n      )}\n    </>\n  );\n};\n\nCircleColorPicker.defaultProps = {\n  color: \"#FF0000\",\n  width: 320,\n  disabled: false,\n  onChange: (): void => {},\n};\n\nexport default CircleColorPicker;\n","import React, { ChangeEventHandler, MouseEventHandler } from \"react\";\nimport { RouteComponentProps, Link, Redirect } from \"react-router-dom\";\nimport { Light as LightEntity, useRemoveLightMutation } from \"generated/graphql\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport styled from \"styled-components\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Switch from \"@material-ui/core/Switch\";\nimport Slider from \"components/SmoothSlider\";\nimport { useLightQueryWithSubscriptions, useThrottledSetLightMutation } from \"lib/hooks\";\nimport { removeLightFromCache } from \"lib/graphqlHelpers\";\nimport CircleColorPicker from \"components/CircleColorPicker\";\n\nconst StyledDiv = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst StyledSlider = styled(Slider)`\n  width: 85%;\n  max-width: 400px;\n  margin-left: 1rem;\n  margin-top: 0.5rem;\n`;\n\nconst EffectsDiv = styled.div`\n  max-width: 400px;\n`;\n\nconst OffsetColorDiv = styled.div`\n  margin-left: 1rem;\n`;\n\ninterface MatchParams {\n  id: string;\n}\n\nconst Light = (\n  props: RouteComponentProps<MatchParams>\n): React.FunctionComponentElement<RouteComponentProps<MatchParams>> => {\n  const { match } = props;\n  const { id } = match.params;\n\n  // TODO: Figure out how to include cache-and-network without ts-ignore\n  // We use cache-and-network\n  // @ts-ignore\n  const { data, error, loading } = useLightQueryWithSubscriptions({\n    fetchPolicy: \"cache-and-network\",\n    notifyOnNetworkStatusChange: true,\n    variables: {\n      id,\n    },\n  });\n  const [newName, setNewName] = React.useState(\"\");\n  const [removed, setRemoved] = React.useState(false);\n  const setLight = useThrottledSetLightMutation();\n  const removeLight = useRemoveLightMutation();\n\n  const handleNameChange: ChangeEventHandler<HTMLInputElement> = (e): void => {\n    setNewName(e.target.value);\n  };\n\n  const handleRenameLight = (currentLight: LightEntity): MouseEventHandler => (): void => {\n    const name = newName;\n\n    setLight({\n      variables: { id: currentLight.id, lightData: { name } },\n      optimisticResponse: {\n        __typename: \"Mutation\",\n        setLight: {\n          __typename: \"Light\",\n          ...currentLight,\n          ...{ name },\n        },\n      },\n    }).then((): void => {\n      setNewName(\"\");\n    });\n  };\n\n  const handleOnChange = (currentLight: LightEntity): ChangeEventHandler<HTMLInputElement> => (\n    e\n  ): void => {\n    const on = e.target.checked;\n\n    setLight({\n      variables: { id: currentLight.id, lightData: { on } },\n      optimisticResponse: {\n        __typename: \"Mutation\",\n        setLight: {\n          __typename: \"Light\",\n          ...currentLight,\n          ...{ on },\n        },\n      },\n    });\n  };\n\n  const handleBrightnessChange = (currentLight: LightEntity): ((value: number) => void) => (\n    brightness: number\n  ): void => {\n    setLight({\n      variables: { id: currentLight.id, lightData: { brightness } },\n      optimisticResponse: {\n        __typename: \"Mutation\",\n        setLight: {\n          __typename: \"Light\",\n          ...currentLight,\n          ...{ brightness },\n        },\n      },\n    });\n  };\n\n  const handleColorChange = (currentLight: LightEntity): ((value: string) => void) => (\n    color\n  ): void => {\n    setLight({\n      variables: { id: currentLight.id, lightData: { color } },\n      optimisticResponse: {\n        __typename: \"Mutation\",\n        setLight: {\n          __typename: \"Light\",\n          ...currentLight,\n          ...{ color },\n        },\n      },\n    });\n  };\n\n  const handleEffectChange = (\n    effect: string,\n    currentLight: LightEntity\n  ): MouseEventHandler => (): void => {\n    setLight({\n      variables: { id: currentLight.id, lightData: { effect } },\n      optimisticResponse: {\n        __typename: \"Mutation\",\n        setLight: {\n          __typename: \"Light\",\n          ...currentLight,\n          ...{ effect },\n        },\n      },\n    });\n  };\n\n  const handleSpeedChange = (currentLight: LightEntity): ((value: number) => void) => (\n    speed: number\n  ): void => {\n    setLight({\n      variables: { id: currentLight.id, lightData: { speed } },\n      optimisticResponse: {\n        __typename: \"Mutation\",\n        setLight: {\n          __typename: \"Light\",\n          ...currentLight,\n          ...{ speed },\n        },\n      },\n    });\n  };\n\n  const handleRemoveLight = (currentLight: LightEntity): MouseEventHandler => (): void => {\n    removeLight({\n      variables: { id: currentLight.id },\n      update: (proxy, { data: removeLightData }): void => {\n        if (!removeLightData || !removeLightData.removeLight) return;\n\n        const lightToRemove = removeLightData.removeLight;\n        removeLightFromCache(proxy, lightToRemove);\n      },\n    }).then((): void => setRemoved(true));\n  };\n\n  let Body;\n  if (loading) {\n    Body = <Typography variant=\"body1\">Loading...</Typography>;\n  } else if (error || !data) {\n    Body = <Typography variant=\"body1\">Error.</Typography>;\n  } else {\n    const { light } = data;\n    Body = (\n      <div>\n        <Typography variant=\"h3\">{light.name}</Typography>\n        <Typography variant=\"h6\">Rename the light: </Typography>\n        <TextField\n          placeholder=\"New Light Name\"\n          value={newName}\n          color=\"primary\"\n          onChange={handleNameChange}\n        />\n        <Button onClick={handleRenameLight(light)} color=\"primary\">\n          Rename\n        </Button>\n        <Typography variant=\"h6\">{`Connected: ${light.connected}`}</Typography>\n        <StyledDiv>\n          <Typography variant=\"h6\">On: </Typography>\n          <Switch\n            checked={light.on}\n            onChange={handleOnChange(light)}\n            disabled={!light.connected}\n            color=\"primary\"\n          />\n        </StyledDiv>\n        <Typography variant=\"h6\">Brightness:</Typography>\n        <StyledSlider\n          value={light.brightness}\n          min={0}\n          max={100}\n          step={1}\n          onChange={handleBrightnessChange(light)}\n          disabled={!light.connected}\n          color=\"primary\"\n          valueLabelDisplay=\"auto\"\n        />\n\n        <Typography variant=\"h6\">Color: </Typography>\n        <OffsetColorDiv>\n          <CircleColorPicker\n            color={light.color}\n            onChange={handleColorChange(light)}\n            width={320}\n            disabled={!light.connected}\n          />\n        </OffsetColorDiv>\n        <Typography variant=\"h6\">{`Current Effect: ${light.effect}`}</Typography>\n        <EffectsDiv>\n          {light.supportedEffects &&\n            light.supportedEffects.map(\n              (supportedEffect): React.FunctionComponentElement<{}> => (\n                <Button\n                  key={supportedEffect}\n                  disabled={!light.connected}\n                  color=\"primary\"\n                  onClick={handleEffectChange(supportedEffect, light)}\n                >\n                  {supportedEffect}\n                </Button>\n              )\n            )}\n        </EffectsDiv>\n        <Typography variant=\"h6\">Effect Speed:</Typography>\n        <StyledSlider\n          value={light.speed}\n          min={1}\n          max={7}\n          step={1}\n          onChange={handleSpeedChange(light)}\n          color=\"primary\"\n          disabled={!light.connected}\n          valueLabelDisplay=\"auto\"\n          marks\n        />\n        <Typography variant=\"h6\">Config Info:</Typography>\n        <Typography variant=\"body1\">{`ID: ${light.id}`}</Typography>\n        <Typography variant=\"body1\">{`Name: ${light.name}`}</Typography>\n        <Typography variant=\"body1\">{`IP Address: ${light.ipAddress}`}</Typography>\n        <Typography variant=\"body1\">{`MAC Address: ${light.macAddress}`}</Typography>\n        <Typography variant=\"body1\">{`Number of LEDs: ${light.numLeds}`}</Typography>\n        <Typography variant=\"body1\">{`UDP Port: ${light.udpPort}`}</Typography>\n        <Typography variant=\"body1\">{`Version: ${light.version}`}</Typography>\n        <Typography variant=\"body1\">{`Hardware: ${light.hardware}`}</Typography>\n        <Typography variant=\"body1\">{`Color Order: ${light.colorOrder}`}</Typography>\n        <Typography variant=\"body1\">{`Strip Type: ${light.stripType}`}</Typography>\n        <Typography variant=\"h6\">Remove the light: </Typography>\n        <Button onClick={handleRemoveLight(light)} color=\"primary\">\n          Remove\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <Link to=\"/\">\n        <Button>{\"< Back\"}</Button>\n      </Link>\n      {Body}\n      {removed && <Redirect push to=\"/\" />}\n    </div>\n  );\n};\n\nexport default Light;\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\nimport styled from \"styled-components\";\nimport { useAddLightMutation, useDiscoveredLightsQuery } from \"generated/graphql\";\nimport { addLightToCache, removeDiscoveredLightFromCache } from \"lib/graphqlHelpers\";\n\nconst StyledDiv = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst AddLight = (): React.FunctionComponentElement<{}> => {\n  const [newLight, setNewLight] = React.useState(\"\");\n  const addLight = useAddLightMutation();\n  const { data, loading, error } = useDiscoveredLightsQuery({\n    fetchPolicy: \"network-only\",\n    pollInterval: 3000,\n  });\n\n  const handleChange: React.ChangeEventHandler<HTMLInputElement> = (e): void => {\n    setNewLight(e.target.value);\n  };\n\n  const handleAddLight = (id: string): React.MouseEventHandler => (): void => {\n    addLight({\n      variables: { id },\n      update: (proxy, { data: addLightData }): void => {\n        if (!addLightData || !addLightData.addLight) return;\n        const lightToAdd = addLightData.addLight;\n\n        /**\n         * Note: This will not automatically remove the light from the discoveredLights list if a\n         * discoveredLights query is already in flight. It will correctly update after the query is finished.\n         */\n        removeDiscoveredLightFromCache(proxy, lightToAdd);\n        addLightToCache(proxy, lightToAdd);\n      },\n    });\n  };\n\n  const handleAddCustomLight: React.MouseEventHandler = (): void => {\n    addLight({\n      variables: { id: newLight },\n      update: (proxy, { data: addLightData }): void => {\n        if (!addLightData || !addLightData.addLight) return;\n        const lightToAdd = addLightData.addLight;\n\n        removeDiscoveredLightFromCache(proxy, lightToAdd);\n        addLightToCache(proxy, lightToAdd);\n      },\n    }).then((): void => {\n      setNewLight(\"\");\n    });\n  };\n\n  let Body;\n  if (loading) {\n    Body = <Typography variant=\"body1\">Loading...</Typography>;\n  } else if (error) {\n    Body = <Typography variant=\"body1\">Error</Typography>;\n  } else if (!data || !data.discoveredLights || !data.discoveredLights.length) {\n    Body = <Typography variant=\"body1\">None</Typography>;\n  } else {\n    Body = data.discoveredLights.map(\n      (light): React.FunctionComponentElement<{}> => (\n        <StyledDiv key={light.id}>\n          <Button onClick={handleAddLight(light.id)}>Add</Button>\n          <Typography variant=\"body1\">{light.id}</Typography>\n        </StyledDiv>\n      )\n    );\n  }\n\n  return (\n    <div>\n      <Typography variant=\"h4\">Add Light</Typography>\n      <StyledDiv>\n        <Button onClick={handleAddCustomLight}>Add</Button>\n        <TextField placeholder=\"New Light ID\" value={newLight} onChange={handleChange} />\n      </StyledDiv>\n      <Typography variant=\"h6\">Discovered Lights</Typography>\n      {Body}\n    </div>\n  );\n};\n\nexport default AddLight;\n","import React from \"react\";\n\n// TODO: Implement\nconst About = (): React.FunctionComponentElement<{}> => <div>About</div>;\n\nexport default About;\n","import React, { MouseEventHandler, ChangeEventHandler } from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport Switch from \"@material-ui/core/Switch\";\nimport styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\nimport { useRemoveLightMutation, Light, useSetLightMutation } from \"generated/graphql\";\nimport { removeLightFromCache } from \"lib/graphqlHelpers\";\nimport { useLightsQueryWithSubscriptions } from \"lib/hooks\";\n\nconst StyledDiv = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst Home = (): React.FunctionComponentElement<{}> => {\n  // TODO: Figure out how to include cache-and-network without ts-ignore\n  // We use cache-and-network\n  // @ts-ignore\n  const { data, error, loading, networkStatus, refetch } = useLightsQueryWithSubscriptions({\n    fetchPolicy: \"cache-and-network\",\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const removeLight = useRemoveLightMutation();\n  const setLight = useSetLightMutation();\n\n  const handleRemoveLight = (id: string): MouseEventHandler => (): void => {\n    removeLight({\n      variables: { id },\n      update: (proxy, { data: removeLightData }): void => {\n        if (!removeLightData || !removeLightData.removeLight) return;\n\n        const lightToRemove = removeLightData.removeLight;\n        removeLightFromCache(proxy, lightToRemove);\n      },\n    });\n  };\n\n  // TODO: Throttle this and make it generic\n  const handleStateChange = (light: Light): ChangeEventHandler<HTMLInputElement> => (e): void => {\n    const on = e.target.checked;\n\n    setLight({\n      variables: { id: light.id, lightData: { on } },\n      optimisticResponse: {\n        __typename: \"Mutation\",\n        setLight: {\n          __typename: \"Light\",\n          ...light,\n          ...{ on },\n        },\n      },\n    });\n  };\n\n  const handleRefetch = async (): Promise<void> => {\n    // TODO: Remove this once react-apollo comes out with native hooks\n    if (error) {\n      // Temporary fix to force a refresh when an error occurs\n      // The current behavior is that refetch will not rerender the component if a graphql error was returned\n      window.location.reload();\n    } else {\n      refetch();\n    }\n  };\n\n  let Body;\n  if (loading || networkStatus === 4) {\n    Body = <Typography variant=\"body1\">Loading...</Typography>;\n  } else if (error) {\n    Body = <Typography variant=\"body1\">Error.</Typography>;\n  } else if (!data || !data.lights || !data.lights.length) {\n    Body = <Typography variant=\"body1\">None</Typography>;\n  } else {\n    Body = data.lights.map(\n      (light): React.FunctionComponentElement<{}> => (\n        <StyledDiv key={light.id}>\n          <Button onClick={handleRemoveLight(light.id)}>Remove</Button>\n          <Switch\n            checked={light.on}\n            onChange={handleStateChange(light)}\n            disabled={!light.connected}\n            color=\"primary\"\n          />\n          <Link to={`/light/${light.id}`}>\n            <Typography variant=\"body1\">{light.name}</Typography>\n          </Link>\n        </StyledDiv>\n      )\n    );\n  }\n\n  return (\n    <div>\n      <Typography variant=\"h4\">Prysma</Typography>\n      <Button onClick={handleRefetch}>Refetch</Button>\n      <Typography variant=\"h6\">Light List</Typography>\n      {Body}\n    </div>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport { ApolloProvider } from \"react-apollo-hooks\"; // Connect Apollo to React\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { StylesProvider } from \"@material-ui/styles\";\nimport { ThemeProvider } from \"styled-components\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport { client } from \"lib/apollo\";\nimport NotFound from \"screens/NotFound\";\nimport Light from \"screens/Light\";\nimport AddLight from \"screens/AddLight\";\nimport About from \"screens/About\";\nimport Home from \"screens/Home\";\n\nconst theme = createMuiTheme();\n\nconst App = (): React.FunctionComponentElement<{}> => (\n  <ApolloProvider client={client}>\n    <StylesProvider injectFirst>\n      <ThemeProvider theme={theme}>\n        <Router>\n          <CssBaseline />\n          <AppBar position=\"static\">\n            <Tabs value={false}>\n              <Tab label=\"Home\" component={Link} to=\"/\" />\n              <Tab label=\"Add Light\" component={Link} to=\"/addLight/\" />\n              <Tab label=\"About\" component={Link} to=\"/about/\" />\n            </Tabs>\n          </AppBar>\n          <Switch>\n            <Route path=\"/\" exact component={Home} />\n            <Route path=\"/about/\" exact component={About} />\n            <Route path=\"/addLight/\" exact component={AddLight} />\n            <Route path=\"/light/:id\" exact component={Light} />\n            <Route component={NotFound} />\n          </Switch>\n        </Router>\n      </ThemeProvider>\n    </StylesProvider>\n  </ApolloProvider>\n);\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"typeface-roboto\"; // Font Import so we don't have to use the CDN\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}