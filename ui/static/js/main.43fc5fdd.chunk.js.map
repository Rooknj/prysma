{"version":3,"sources":["lib/apollo.ts","screens/NotFound/NotFound.tsx","generated/graphql.tsx","components/SmoothSlider/SmoothSlider.tsx","lib/graphqlConstants.ts","lib/graphqlHelpers.ts","lib/hooks/useLightsQueryWithSubscriptions.tsx","lib/hooks/useLightQueryWithSubscriptions.tsx","lib/hooks/useThrottledSetLightMutation.tsx","components/CircleColorPicker/CircleColorPicker.tsx","screens/Light/Light.tsx","screens/AddLight/AddLight.tsx","screens/About/About.tsx","screens/Home/Home.tsx","components/App/App.tsx","index.tsx"],"names":["serverName","window","location","host","wsProtocol","protocol","httpLink","HttpLink","uri","concat","wsLink","WebSocketLink","options","reconnect","HTTP_WS_LINK","split","_ref","query","definition","getMainDefinition","kind","operation","ON_ERROR_LINK","onError","_ref2","graphQLErrors","networkError","map","_ref3","message","locations","path","console","error","CACHE","InMemoryCache","client","ApolloClient","link","ApolloLink","from","cache","NotFound","props","react_default","a","createElement","react_router_dom","to","Typography","variant","pathname","lightFieldsFragmentDoc","gql","_templateObject","LightDocument","_templateObject2","LightsDocument","_templateObject3","DiscoveredLightsDocument","_templateObject4","SetLightDocument","_templateObject5","useSetLightMutation","baseOptions","ReactApolloHooks","AddLightDocument","_templateObject6","RemoveLightDocument","_templateObject7","useRemoveLightMutation","LightChangedDocument","_templateObject8","useLightChangedSubscription","LightAddedDocument","_templateObject9","LightRemovedDocument","_templateObject10","StyledSlider","styled","Slider","SmoothSlider_templateObject","SmoothSlider","value","onChange","other","Object","objectWithoutProperties","_React$useState","React","useState","_React$useState2","slicedToArray","internalValue","setInternalValue","useEffect","assign","_","newValue","isArray","defaultProps","LIGHT_FIELDS","graphqlConstants_templateObject","LIGHTS","graphqlConstants_templateObject2","graphqlConstants_templateObject3","DISCOVERED_LIGHTS","graphqlConstants_templateObject4","removeLightFromCache","graphqlConstants_templateObject5","graphqlConstants_templateObject6","graphqlConstants_templateObject7","graphqlConstants_templateObject8","graphqlConstants_templateObject9","graphqlConstants_templateObject10","proxy","lightToRemove","result","readQuery","lights","writeQuery","data","filter","light","id","name","addLightToCache","lightToAdd","removeDiscoveredLightFromCache","discoveredLightToRemove","discoveredLights","useLightsQueryWithSubscriptions","queryOptions","QueryData","useLightAddedSubscription","onSubscriptionData","subscriptionData","lightAdded","useLightRemovedSubscription","lightRemoved","useLightQueryWithSubscriptions","throttleSpeed","process","REACT_APP_ENV","CircleColorPicker","color","width","inUse","setInUse","colorPickerEl","useRef","iroColorPicker","current","iro","ColorPicker","layout","component","ui","Wheel","on","test","hexString","toUpperCase","off","toLowerCase","resize","ref","StyledDiv","div","Light_templateObject","Light","Body","currentLight","match","params","_useLightQueryWithSub","fetchPolicy","notifyOnNetworkStatusChange","variables","loading","newName","setNewName","_React$useState3","_React$useState4","removed","setRemoved","setLight","throttle","useThrottledSetLightMutation","removeLight","TextField","placeholder","e","target","Button","onClick","lightData","optimisticResponse","__typename","objectSpread","then","connected","Switch","checked","handleOnChange","disabled","components_SmoothSlider_SmoothSlider","brightness","min","max","step","handleBrightnessChange","valueLabelDisplay","components_CircleColorPicker_CircleColorPicker","handleColorChange","effect","supportedEffects","supportedEffect","key","speed","handleSpeedChange","marks","ipAddress","macAddress","numLeds","udpPort","version","hardware","colorOrder","stripType","update","removeLightData","handleRemoveLight","react_router","push","AddLight_templateObject","AddLight","newLight","setNewLight","addLight","_useDiscoveredLightsQ","useDiscoveredLightsQuery","pollInterval","length","AddLight_StyledDiv","addLightData","About","Home_templateObject","Home","_useLightsQueryWithSu","networkStatus","refetch","handleStateChange","Home_StyledDiv","theme","createMuiTheme","App","ApolloContext","StylesProvider","injectFirst","styled_components_browser_esm","CssBaseline","AppBar","position","Tabs","Tab","label","Link","exact","ReactDOM","render","components_App_App","document","getElementById"],"mappings":"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","file":"static/js/main.43fc5fdd.chunk.js","sourcesContent":["// eslint-disable-next-line eslint-comments/disable-enable-pair\n/* eslint-disable no-console */\n// Apollo imports\nimport { ApolloClient } from \"apollo-client\"; // Base Apollo\nimport { InMemoryCache } from \"apollo-cache-inmemory\"; // Local Cache Storage\nimport { ApolloLink, split } from \"apollo-link\"; // Handles and manages the different apollo-link packages\nimport { HttpLink } from \"apollo-link-http\"; // Use Apollo Over HTTP (Queries, Mutations)\nimport { WebSocketLink } from \"apollo-link-ws\"; // Use Apollo Over Websockets (Subscriptions)\nimport { onError } from \"apollo-link-error\"; // Do custom logic when a GraphQL or network error occurs\nimport { getMainDefinition } from \"apollo-utilities\"; // Aids with splitting links\n\nconst serverName = window.location.host;\nconst wsProtocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n\n// Create an http link:\nconst httpLink = new HttpLink({\n  uri: `${window.location.protocol}//${serverName}/graphql`,\n});\n\n// Create a WebSocket link:\nconst wsLink = new WebSocketLink({\n  uri: `${wsProtocol}//${serverName}/graphql`,\n  options: {\n    reconnect: true,\n    // For authentication over websockets\n    // connectionParams: {\n    //   authToken: user.authToken,\n    // },\n  },\n});\n\n// This link will handle sending out HTTP and WS requests\nconst HTTP_WS_LINK = split(\n  // Split the links so your query and mutations go to the apollo-link-http while subscriptions go to apollo-link-ws\n  ({ query }): boolean => {\n    const definition = getMainDefinition(query);\n    return definition.kind === \"OperationDefinition\" && definition.operation === \"subscription\";\n  },\n  wsLink,\n  httpLink\n);\n\n// This link does custom logic when a GraphQL or network error occurs\nconst ON_ERROR_LINK = onError(({ graphQLErrors, networkError }): void => {\n  if (graphQLErrors)\n    graphQLErrors.map(({ message, locations, path }): void =>\n      console.error(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`)\n    );\n  if (networkError) console.error(`[Network error]: ${networkError}`);\n});\n\nconst CACHE = new InMemoryCache();\n\n// Point apollo towards graphql server\nexport const client = new ApolloClient({\n  link: ApolloLink.from([ON_ERROR_LINK, HTTP_WS_LINK]),\n  cache: CACHE,\n});\n","import React from \"react\";\nimport { Link, RouteComponentProps } from \"react-router-dom\";\nimport Typography from \"@material-ui/core/Typography\";\n\n// TODO: Make Into Empty State Page\nconst NotFound = (\n  props: RouteComponentProps\n): React.FunctionComponentElement<RouteComponentProps> => {\n  const { location } = props;\n  return (\n    <div>\n      <Link to=\"/\">\n        <Typography variant=\"body1\">{\"< Back to Home\"}</Typography>\n      </Link>\n      <Typography variant=\"h2\">{`No Match For ${location.pathname}`}</Typography>\n    </div>\n  );\n};\n\nexport default NotFound;\nexport interface NotFound extends ReturnType<typeof NotFound> {}\n","// !!! THIS FILE WAS GENERATED BY GRAPHQL-CODEGEN !!!\n// !!!    DO NOT MODIFY THIS FILE BY YOURSELF     !!!\nimport gql from \"graphql-tag\";\nimport * as ReactApolloHooks from \"react-apollo-hooks\";\nimport * as ReactApollo from \"react-apollo\";\n\nexport type Maybe<T> = T | null;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\n/** Object representing a Light */\nexport type Light = {\n  __typename?: \"Light\";\n  id: Scalars[\"ID\"];\n  /** The display name of the Light */\n  name: Scalars[\"String\"];\n  /** Whether the light is connected to the MQTT broker or not */\n  connected: Scalars[\"Boolean\"];\n  /** Whether the light is switched on or not */\n  on: Scalars[\"Boolean\"];\n  /** The brightness of the light as a percentage from 0-100 */\n  brightness: Scalars[\"Int\"];\n  /** The current color of the light in hexadecimal notation */\n  color: Scalars[\"String\"];\n  /** The currently playing effect of the light */\n  effect: Scalars[\"String\"];\n  /** The speed of the currently playing effect from 1-7 */\n  speed: Scalars[\"Int\"];\n  /** The list of effects the light can play */\n  supportedEffects: Array<Scalars[\"String\"]>;\n  /** The IP Address of the light's controller */\n  ipAddress: Scalars[\"String\"];\n  /** The MAC Address of the light's controller */\n  macAddress: Scalars[\"String\"];\n  /** The number of LEDs the light has */\n  numLeds: Scalars[\"Int\"];\n  /** The UDP port the light is listening on for music visualization data */\n  udpPort: Scalars[\"Int\"];\n  /** The firmware version the light's controller is running */\n  version: Scalars[\"String\"];\n  /** The hardware of the light's controller */\n  hardware: Scalars[\"String\"];\n  /** The order of colors the light strip runs on ex: RGB, GRB, BGR */\n  colorOrder: Scalars[\"String\"];\n  /** The type of LED strip the light is ex: WS2812B, APA102 */\n  stripType: Scalars[\"String\"];\n};\n\nexport type LightInput = {\n  /** Set the display name of the light */\n  name?: Maybe<Scalars[\"String\"]>;\n  /** Power the light on or off */\n  on?: Maybe<Scalars[\"Boolean\"]>;\n  /** Change the brightness of the light (a value 0-100) */\n  brightness?: Maybe<Scalars[\"Int\"]>;\n  /** Change the color of the light (must be in hexadecimal format) */\n  color?: Maybe<Scalars[\"String\"]>;\n  /** Change the currently playing effect of the light */\n  effect?: Maybe<Scalars[\"String\"]>;\n  /** Change the speed of the light (a value 1-7) */\n  speed?: Maybe<Scalars[\"Int\"]>;\n};\n\nexport type Mutation = {\n  __typename?: \"Mutation\";\n  /** Change some of the light's data (use setLightState to change the state) */\n  setLight: Light;\n  /** Add a new light */\n  addLight: Light;\n  /** Remove a currently added light */\n  removeLight: Light;\n};\n\nexport type MutationSetLightArgs = {\n  lightData: LightInput;\n  id: Scalars[\"String\"];\n};\n\nexport type MutationAddLightArgs = {\n  id: Scalars[\"String\"];\n};\n\nexport type MutationRemoveLightArgs = {\n  id: Scalars[\"String\"];\n};\n\nexport type Query = {\n  __typename?: \"Query\";\n  /** Get a light by it's ID */\n  light: Light;\n  /** Get all currently added lights in the order they were added */\n  lights: Array<Light>;\n  /** Get all currently added lights in the order they were added */\n  discoveredLights: Array<Light>;\n};\n\nexport type QueryLightArgs = {\n  id: Scalars[\"String\"];\n};\n\nexport type Subscription = {\n  __typename?: \"Subscription\";\n  lightChanged: Light;\n  lightAdded: Light;\n  lightRemoved: Light;\n};\nexport type LightFieldsFragment = { __typename?: \"Light\" } & Pick<\n  Light,\n  | \"id\"\n  | \"name\"\n  | \"connected\"\n  | \"on\"\n  | \"brightness\"\n  | \"color\"\n  | \"effect\"\n  | \"speed\"\n  | \"supportedEffects\"\n  | \"ipAddress\"\n  | \"macAddress\"\n  | \"numLeds\"\n  | \"udpPort\"\n  | \"version\"\n  | \"hardware\"\n  | \"colorOrder\"\n  | \"stripType\"\n>;\n\nexport type LightQueryVariables = {\n  id: Scalars[\"String\"];\n};\n\nexport type LightQuery = { __typename?: \"Query\" } & {\n  light: { __typename?: \"Light\" } & LightFieldsFragment;\n};\n\nexport type LightsQueryVariables = {};\n\nexport type LightsQuery = { __typename?: \"Query\" } & {\n  lights: Array<{ __typename?: \"Light\" } & LightFieldsFragment>;\n};\n\nexport type DiscoveredLightsQueryVariables = {};\n\nexport type DiscoveredLightsQuery = { __typename?: \"Query\" } & {\n  discoveredLights: Array<{ __typename?: \"Light\" } & LightFieldsFragment>;\n};\n\nexport type SetLightMutationVariables = {\n  id: Scalars[\"String\"];\n  lightData: LightInput;\n};\n\nexport type SetLightMutation = { __typename?: \"Mutation\" } & {\n  setLight: { __typename?: \"Light\" } & LightFieldsFragment;\n};\n\nexport type AddLightMutationVariables = {\n  id: Scalars[\"String\"];\n};\n\nexport type AddLightMutation = { __typename?: \"Mutation\" } & {\n  addLight: { __typename?: \"Light\" } & LightFieldsFragment;\n};\n\nexport type RemoveLightMutationVariables = {\n  id: Scalars[\"String\"];\n};\n\nexport type RemoveLightMutation = { __typename?: \"Mutation\" } & {\n  removeLight: { __typename?: \"Light\" } & LightFieldsFragment;\n};\n\nexport type LightChangedSubscriptionVariables = {};\n\nexport type LightChangedSubscription = { __typename?: \"Subscription\" } & {\n  lightChanged: { __typename?: \"Light\" } & LightFieldsFragment;\n};\n\nexport type LightAddedSubscriptionVariables = {};\n\nexport type LightAddedSubscription = { __typename?: \"Subscription\" } & {\n  lightAdded: { __typename?: \"Light\" } & LightFieldsFragment;\n};\n\nexport type LightRemovedSubscriptionVariables = {};\n\nexport type LightRemovedSubscription = { __typename?: \"Subscription\" } & {\n  lightRemoved: { __typename?: \"Light\" } & LightFieldsFragment;\n};\nexport const lightFieldsFragmentDoc = gql`\n  fragment lightFields on Light {\n    id\n    name\n    connected\n    on\n    brightness\n    color\n    effect\n    speed\n    supportedEffects\n    ipAddress\n    macAddress\n    numLeds\n    udpPort\n    version\n    hardware\n    colorOrder\n    stripType\n  }\n`;\nexport const LightDocument = gql`\n  query light($id: String!) {\n    light(id: $id) {\n      ...lightFields\n    }\n  }\n  ${lightFieldsFragmentDoc}\n`;\n\nexport function useLightQuery(\n  baseOptions?: ReactApolloHooks.QueryHookOptions<LightQueryVariables>\n) {\n  return ReactApolloHooks.useQuery<LightQuery, LightQueryVariables>(LightDocument, baseOptions);\n}\nexport const LightsDocument = gql`\n  query lights {\n    lights {\n      ...lightFields\n    }\n  }\n  ${lightFieldsFragmentDoc}\n`;\n\nexport function useLightsQuery(\n  baseOptions?: ReactApolloHooks.QueryHookOptions<LightsQueryVariables>\n) {\n  return ReactApolloHooks.useQuery<LightsQuery, LightsQueryVariables>(LightsDocument, baseOptions);\n}\nexport const DiscoveredLightsDocument = gql`\n  query discoveredLights {\n    discoveredLights {\n      ...lightFields\n    }\n  }\n  ${lightFieldsFragmentDoc}\n`;\n\nexport function useDiscoveredLightsQuery(\n  baseOptions?: ReactApolloHooks.QueryHookOptions<DiscoveredLightsQueryVariables>\n) {\n  return ReactApolloHooks.useQuery<DiscoveredLightsQuery, DiscoveredLightsQueryVariables>(\n    DiscoveredLightsDocument,\n    baseOptions\n  );\n}\nexport const SetLightDocument = gql`\n  mutation setLight($id: String!, $lightData: LightInput!) {\n    setLight(id: $id, lightData: $lightData) {\n      ...lightFields\n    }\n  }\n  ${lightFieldsFragmentDoc}\n`;\nexport type SetLightMutationFn = ReactApollo.MutationFn<\n  SetLightMutation,\n  SetLightMutationVariables\n>;\n\nexport function useSetLightMutation(\n  baseOptions?: ReactApolloHooks.MutationHookOptions<SetLightMutation, SetLightMutationVariables>\n) {\n  return ReactApolloHooks.useMutation<SetLightMutation, SetLightMutationVariables>(\n    SetLightDocument,\n    baseOptions\n  );\n}\nexport const AddLightDocument = gql`\n  mutation addLight($id: String!) {\n    addLight(id: $id) {\n      ...lightFields\n    }\n  }\n  ${lightFieldsFragmentDoc}\n`;\nexport type AddLightMutationFn = ReactApollo.MutationFn<\n  AddLightMutation,\n  AddLightMutationVariables\n>;\n\nexport function useAddLightMutation(\n  baseOptions?: ReactApolloHooks.MutationHookOptions<AddLightMutation, AddLightMutationVariables>\n) {\n  return ReactApolloHooks.useMutation<AddLightMutation, AddLightMutationVariables>(\n    AddLightDocument,\n    baseOptions\n  );\n}\nexport const RemoveLightDocument = gql`\n  mutation removeLight($id: String!) {\n    removeLight(id: $id) {\n      ...lightFields\n    }\n  }\n  ${lightFieldsFragmentDoc}\n`;\nexport type RemoveLightMutationFn = ReactApollo.MutationFn<\n  RemoveLightMutation,\n  RemoveLightMutationVariables\n>;\n\nexport function useRemoveLightMutation(\n  baseOptions?: ReactApolloHooks.MutationHookOptions<\n    RemoveLightMutation,\n    RemoveLightMutationVariables\n  >\n) {\n  return ReactApolloHooks.useMutation<RemoveLightMutation, RemoveLightMutationVariables>(\n    RemoveLightDocument,\n    baseOptions\n  );\n}\nexport const LightChangedDocument = gql`\n  subscription lightChanged {\n    lightChanged {\n      ...lightFields\n    }\n  }\n  ${lightFieldsFragmentDoc}\n`;\n\nexport function useLightChangedSubscription(\n  baseOptions?: ReactApolloHooks.SubscriptionHookOptions<\n    LightChangedSubscription,\n    LightChangedSubscriptionVariables\n  >\n) {\n  return ReactApolloHooks.useSubscription<\n    LightChangedSubscription,\n    LightChangedSubscriptionVariables\n  >(LightChangedDocument, baseOptions);\n}\nexport const LightAddedDocument = gql`\n  subscription lightAdded {\n    lightAdded {\n      ...lightFields\n    }\n  }\n  ${lightFieldsFragmentDoc}\n`;\n\nexport function useLightAddedSubscription(\n  baseOptions?: ReactApolloHooks.SubscriptionHookOptions<\n    LightAddedSubscription,\n    LightAddedSubscriptionVariables\n  >\n) {\n  return ReactApolloHooks.useSubscription<LightAddedSubscription, LightAddedSubscriptionVariables>(\n    LightAddedDocument,\n    baseOptions\n  );\n}\nexport const LightRemovedDocument = gql`\n  subscription lightRemoved {\n    lightRemoved {\n      ...lightFields\n    }\n  }\n  ${lightFieldsFragmentDoc}\n`;\n\nexport function useLightRemovedSubscription(\n  baseOptions?: ReactApolloHooks.SubscriptionHookOptions<\n    LightRemovedSubscription,\n    LightRemovedSubscriptionVariables\n  >\n) {\n  return ReactApolloHooks.useSubscription<\n    LightRemovedSubscription,\n    LightRemovedSubscriptionVariables\n  >(LightRemovedDocument, baseOptions);\n}\n","import React, { ChangeEvent } from \"react\";\nimport Slider, { SliderProps } from \"@material-ui/lab/Slider\";\nimport styled from \"styled-components\";\nimport { isArray } from \"util\";\n\nconst StyledSlider = styled(Slider)`\n  padding-top: 1rem;\n  padding-bottom: 1rem;\n`;\n\ninterface SmoothSliderProps extends Omit<SliderProps, \"value\" | \"onChange\"> {\n  value: number;\n  onChange: (value: number) => void;\n}\n\nconst SmoothSlider = (\n  props: SmoothSliderProps\n): React.FunctionComponentElement<SmoothSliderProps> => {\n  const { value, onChange, ...other } = props;\n  const [internalValue, setInternalValue] = React.useState(value);\n\n  // TODO: Figure out how to make a smooth animation when updating brightness through subscriptions\n  React.useEffect((): void => {\n    setInternalValue(value);\n  }, [value]); // Only re-run the effect if count changes\n\n  const handleChange = (_: ChangeEvent<{}>, newValue: number | number[]): void => {\n    if (isArray(newValue)) return;\n    setInternalValue(newValue);\n    onChange(newValue);\n  };\n\n  return <StyledSlider value={internalValue} onChange={handleChange} {...other} />;\n};\n\nSmoothSlider.defaultProps = {\n  onChange: (): void => {},\n};\n\nexport default SmoothSlider;\n","import gql from \"graphql-tag\";\n\nconst LIGHT_FIELDS = gql`\n  fragment lightFields on Light {\n    id\n    name\n    connected\n    on\n    brightness\n    color\n    effect\n    speed\n    supportedEffects\n    ipAddress\n    macAddress\n    numLeds\n    udpPort\n    version\n    hardware\n    colorOrder\n    stripType\n  }\n`;\n\nexport const LIGHT = gql`\n  query light($id: String!) {\n    light(id: $id) {\n      ...lightFields\n    }\n  }\n  ${LIGHT_FIELDS}\n`;\n\nexport const LIGHTS = gql`\n  query lights {\n    lights {\n      ...lightFields\n    }\n  }\n  ${LIGHT_FIELDS}\n`;\n\nexport const DISCOVERED_LIGHTS = gql`\n  query discoveredLights {\n    discoveredLights {\n      ...lightFields\n    }\n  }\n  ${LIGHT_FIELDS}\n`;\n\nexport const SET_LIGHT = gql`\n  mutation setLight($id: String!, $lightData: LightInput!) {\n    setLight(id: $id, lightData: $lightData) {\n      ...lightFields\n    }\n  }\n  ${LIGHT_FIELDS}\n`;\n\nexport const ADD_LIGHT = gql`\n  mutation addLight($id: String!) {\n    addLight(id: $id) {\n      ...lightFields\n    }\n  }\n  ${LIGHT_FIELDS}\n`;\n\nexport const REMOVE_LIGHT = gql`\n  mutation removeLight($id: String!) {\n    removeLight(id: $id) {\n      ...lightFields\n    }\n  }\n  ${LIGHT_FIELDS}\n`;\n\nexport const LIGHT_CHANGED = gql`\n  subscription lightChanged {\n    lightChanged {\n      ...lightFields\n    }\n  }\n  ${LIGHT_FIELDS}\n`;\n\nexport const LIGHT_ADDED = gql`\n  subscription lightAdded {\n    lightAdded {\n      ...lightFields\n    }\n  }\n  ${LIGHT_FIELDS}\n`;\n\nexport const LIGHT_REMOVED = gql`\n  subscription lightRemoved {\n    lightRemoved {\n      ...lightFields\n    }\n  }\n  ${LIGHT_FIELDS}\n`;\n","import { Light, LightsQuery, DiscoveredLightsQuery } from \"generated/graphql\";\nimport { DataProxy } from \"apollo-cache\";\nimport { LIGHTS, DISCOVERED_LIGHTS } from \"./graphqlConstants\";\n\nexport const removeLightFromCache = (proxy: DataProxy, lightToRemove: Light): void => {\n  try {\n    const result = proxy.readQuery<LightsQuery>({\n      query: LIGHTS,\n    });\n    if (!result || !result.lights) return;\n    const { lights } = result;\n\n    proxy.writeQuery({\n      query: LIGHTS,\n      data: {\n        lights: lights.filter((light): boolean => light.id !== lightToRemove.id),\n      },\n    });\n  } catch (error) {\n    // If there is an invariant error, this shouldnt be an issue so ignore it\n    if (error.name === \"Invariant Violation\") return;\n    throw error;\n  }\n};\n\nexport const addLightToCache = (proxy: DataProxy, lightToAdd: Light): void => {\n  try {\n    const result = proxy.readQuery<LightsQuery>({\n      query: LIGHTS,\n    });\n    if (!result || !result.lights) return;\n    const { lights } = result;\n\n    proxy.writeQuery({\n      query: LIGHTS,\n      data: { lights: lights.concat([lightToAdd]) },\n    });\n  } catch (error) {\n    // If there is an invariant error, this shouldnt be an issue so ignore it\n    if (error.name === \"Invariant Violation\") return;\n    throw error;\n  }\n};\n\nexport const removeDiscoveredLightFromCache = (\n  proxy: DataProxy,\n  discoveredLightToRemove: Light\n): void => {\n  try {\n    const result = proxy.readQuery<DiscoveredLightsQuery>({\n      query: DISCOVERED_LIGHTS,\n    });\n    if (!result || !result.discoveredLights) return;\n    const { discoveredLights } = result;\n\n    proxy.writeQuery({\n      query: DISCOVERED_LIGHTS,\n      data: {\n        discoveredLights: discoveredLights.filter(\n          (light): boolean => light.id !== discoveredLightToRemove.id\n        ),\n      },\n    });\n  } catch (error) {\n    // If there is an invariant error, this shouldnt be an issue so ignore it\n    if (error.name === \"Invariant Violation\") return;\n    throw error;\n  }\n};\n","import {\n  useLightsQuery,\n  LightsQuery,\n  LightsQueryVariables,\n  useLightChangedSubscription,\n  useLightAddedSubscription,\n  useLightRemovedSubscription,\n} from \"generated/graphql\";\nimport { QueryHookResult, QueryHookOptions } from \"react-apollo-hooks\";\nimport {\n  removeDiscoveredLightFromCache,\n  addLightToCache,\n  removeLightFromCache,\n} from \"lib/graphqlHelpers\";\n\nexport const useLightsQueryWithSubscriptions = (\n  queryOptions?: QueryHookOptions<LightsQueryVariables, object>\n): QueryHookResult<LightsQuery, LightsQueryVariables> => {\n  const QueryData = useLightsQuery(queryOptions);\n\n  // This will automatically update the light in the cache when it gets a message\n  useLightChangedSubscription();\n\n  // This will automatically add lights to the cache when it gets a message\n  useLightAddedSubscription({\n    onSubscriptionData: ({ client, subscriptionData }): void => {\n      if (!subscriptionData.data || !subscriptionData.data.lightAdded) {\n        return;\n      }\n      const { lightAdded } = subscriptionData.data;\n\n      // If no data was returned, do nothing\n      if (!lightAdded) return;\n\n      // Remove the added light from discoveredLights\n      removeDiscoveredLightFromCache(client, lightAdded);\n\n      // Add the light to LIGHTS\n      addLightToCache(client, lightAdded);\n    },\n  });\n\n  // This will automatically remove lights from the cache when it gets a message\n  useLightRemovedSubscription({\n    onSubscriptionData: ({ client, subscriptionData }): void => {\n      if (!subscriptionData.data || !subscriptionData.data.lightRemoved) {\n        return;\n      }\n      const { lightRemoved } = subscriptionData.data;\n\n      // If no data was returned, do nothing\n      if (!lightRemoved) return;\n\n      removeLightFromCache(client, lightRemoved);\n    },\n  });\n\n  return QueryData;\n};\n","import {\n  useLightQuery,\n  LightQuery,\n  LightQueryVariables,\n  useLightChangedSubscription,\n} from \"generated/graphql\";\nimport { QueryHookResult, QueryHookOptions } from \"react-apollo-hooks\";\n\nexport const useLightQueryWithSubscriptions = (\n  queryOptions?: QueryHookOptions<LightQueryVariables, object>\n): QueryHookResult<LightQuery, LightQueryVariables> => {\n  const QueryData = useLightQuery(queryOptions);\n\n  // This will automatically update the light in the cache when it gets a message\n  useLightChangedSubscription();\n\n  return QueryData;\n};\n","import React from \"react\";\nimport {\n  useSetLightMutation,\n  SetLightMutation,\n  SetLightMutationVariables,\n} from \"generated/graphql\";\nimport throttle from \"lodash.throttle\";\nimport { MutationFn, MutationHookOptions } from \"react-apollo-hooks\";\n\nconst throttleSpeed = process.env.REACT_APP_ENV === \"test\" ? 0 : 500;\n\nexport const useThrottledSetLightMutation = (\n  baseOptions?: MutationHookOptions<SetLightMutation, SetLightMutationVariables, object> | undefined\n): MutationFn<SetLightMutation, SetLightMutationVariables> & {\n  cancel(): void;\n  flush(): void;\n} => {\n  const setLight = useSetLightMutation(baseOptions);\n\n  // Use a ref here to store the value of setLightState so that it doesn't change on rerenders.\n  // This is necessary for lodash throttle to function properly\n  const { current: throttledSetLight } = React.useRef(throttle(setLight, throttleSpeed));\n\n  return throttledSetLight;\n};\n","import React, { useEffect, useRef } from \"react\";\nimport iro from \"@jaames/iro\";\n\nexport interface CircleColorPickerProps {\n  color: string;\n  width: number;\n  onChange: (color: string) => void;\n}\n\nconst CircleColorPicker = (\n  props: CircleColorPickerProps\n): React.FunctionComponentElement<CircleColorPickerProps> => {\n  const { onChange, color, width } = props;\n\n  const [inUse, setInUse] = React.useState(false);\n  const colorPickerEl = useRef<HTMLDivElement>(null);\n  const iroColorPicker = useRef<iro.ColorPicker | null>(null);\n\n  // Initialize the color picker\n  useEffect((): void => {\n    iroColorPicker.current = new iro.ColorPicker(colorPickerEl.current, {\n      // Set the size of the color picker\n      // width,\n      // Set the initial color to pure red\n      // color,\n      // Only use the color wheel\n      layout: [\n        {\n          component: iro.ui.Wheel,\n          options: {},\n        },\n      ],\n    });\n    iroColorPicker.current.on(\"input:start\", (): void => setInUse(true));\n    iroColorPicker.current.on(\"input:end\", (): void => setInUse(false));\n  }, []);\n\n  // Reassign the onChange function if it changes\n  useEffect((): (() => void) => {\n    const test = ({ hexString }: iro.Color): void => {\n      // hexString from iro.js is always lowercase but the API should always return uppercase\n      onChange(hexString.toUpperCase());\n    };\n\n    if (iroColorPicker && iroColorPicker.current) {\n      iroColorPicker.current.on(\"input:change\", test);\n    }\n\n    return (): void => {\n      if (iroColorPicker && iroColorPicker.current) {\n        iroColorPicker.current.off(\"input:change\", test);\n      }\n    };\n  }, [onChange]);\n\n  // Reassign the colorpicker's color if the color prop changes and the picker is not currently being used\n  useEffect((): void => {\n    if (!iroColorPicker || !iroColorPicker.current) {\n      return;\n    }\n    // Don't reassign the color if it hasn't changed\n    // We need to do this to prevent accidentally calling the input:change event twice\n    if (iroColorPicker.current.color.hexString === color.toLowerCase()) {\n      return;\n    }\n    if (inUse) {\n      return;\n    }\n    iroColorPicker.current.color.hexString = color.toLowerCase();\n\n    // We are not including inUse in the dependencies array because we do not want this effect to be triggered when inUse changes\n    // We only want this effect to be triggered on a color change\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [color]);\n\n  // Resize the colorpicker if the width prop changes\n  useEffect((): void => {\n    if (!iroColorPicker || !iroColorPicker.current) {\n      return;\n    }\n    iroColorPicker.current.resize(width);\n  }, [width]);\n\n  return <div id=\"color-picker-container\" ref={colorPickerEl} />;\n};\n\nCircleColorPicker.defaultProps = {\n  color: \"#FF0000\",\n  width: 320,\n  onChange: (): void => {},\n};\n\nexport default CircleColorPicker;\n","import React, { ChangeEventHandler, MouseEventHandler } from \"react\";\nimport { RouteComponentProps, Link, Redirect } from \"react-router-dom\";\nimport { Light as LightEntity, useRemoveLightMutation } from \"generated/graphql\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport styled from \"styled-components\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Switch from \"@material-ui/core/Switch\";\nimport Slider from \"components/SmoothSlider\";\nimport { useLightQueryWithSubscriptions, useThrottledSetLightMutation } from \"lib/hooks\";\nimport { removeLightFromCache } from \"lib/graphqlHelpers\";\nimport CircleColorPicker from \"components/CircleColorPicker\";\n\nconst StyledDiv = styled.div`\n  display: flex;\n  align-items: center;\n`;\ninterface MatchParams {\n  id: string;\n}\n\nconst Light = (\n  props: RouteComponentProps<MatchParams>\n): React.FunctionComponentElement<RouteComponentProps<MatchParams>> => {\n  const { match } = props;\n  const { id } = match.params;\n\n  // TODO: Figure out how to include cache-and-network without ts-ignore\n  // We use cache-and-network\n  // @ts-ignore\n  const { data, error, loading } = useLightQueryWithSubscriptions({\n    fetchPolicy: \"cache-and-network\",\n    notifyOnNetworkStatusChange: true,\n    variables: {\n      id,\n    },\n  });\n  const [newName, setNewName] = React.useState(\"\");\n  const [removed, setRemoved] = React.useState(false);\n  const setLight = useThrottledSetLightMutation();\n  const removeLight = useRemoveLightMutation();\n\n  const handleNameChange: ChangeEventHandler<HTMLInputElement> = (e): void => {\n    setNewName(e.target.value);\n  };\n\n  const handleRenameLight = (currentLight: LightEntity): MouseEventHandler => (): void => {\n    const name = newName;\n\n    setLight({\n      variables: { id: currentLight.id, lightData: { name } },\n      optimisticResponse: {\n        __typename: \"Mutation\",\n        setLight: {\n          __typename: \"Light\",\n          ...currentLight,\n          ...{ name },\n        },\n      },\n    }).then((): void => {\n      setNewName(\"\");\n    });\n  };\n\n  const handleOnChange = (currentLight: LightEntity): ChangeEventHandler<HTMLInputElement> => (\n    e\n  ): void => {\n    const on = e.target.checked;\n\n    setLight({\n      variables: { id: currentLight.id, lightData: { on } },\n      optimisticResponse: {\n        __typename: \"Mutation\",\n        setLight: {\n          __typename: \"Light\",\n          ...currentLight,\n          ...{ on },\n        },\n      },\n    });\n  };\n\n  const handleBrightnessChange = (currentLight: LightEntity): ((value: number) => void) => (\n    brightness: number\n  ): void => {\n    setLight({\n      variables: { id: currentLight.id, lightData: { brightness } },\n      optimisticResponse: {\n        __typename: \"Mutation\",\n        setLight: {\n          __typename: \"Light\",\n          ...currentLight,\n          ...{ brightness },\n        },\n      },\n    });\n  };\n\n  const handleColorChange = (currentLight: LightEntity): ((value: string) => void) => (\n    color\n  ): void => {\n    setLight({\n      variables: { id: currentLight.id, lightData: { color } },\n      optimisticResponse: {\n        __typename: \"Mutation\",\n        setLight: {\n          __typename: \"Light\",\n          ...currentLight,\n          ...{ color },\n        },\n      },\n    });\n  };\n\n  const handleEffectChange = (\n    effect: string,\n    currentLight: LightEntity\n  ): MouseEventHandler => (): void => {\n    setLight({\n      variables: { id: currentLight.id, lightData: { effect } },\n      optimisticResponse: {\n        __typename: \"Mutation\",\n        setLight: {\n          __typename: \"Light\",\n          ...currentLight,\n          ...{ effect },\n        },\n      },\n    });\n  };\n\n  const handleSpeedChange = (currentLight: LightEntity): ((value: number) => void) => (\n    speed: number\n  ): void => {\n    setLight({\n      variables: { id: currentLight.id, lightData: { speed } },\n      optimisticResponse: {\n        __typename: \"Mutation\",\n        setLight: {\n          __typename: \"Light\",\n          ...currentLight,\n          ...{ speed },\n        },\n      },\n    });\n  };\n\n  const handleRemoveLight = (currentLight: LightEntity): MouseEventHandler => (): void => {\n    removeLight({\n      variables: { id: currentLight.id },\n      update: (proxy, { data: removeLightData }): void => {\n        if (!removeLightData || !removeLightData.removeLight) return;\n\n        const lightToRemove = removeLightData.removeLight;\n        removeLightFromCache(proxy, lightToRemove);\n      },\n    }).then((): void => setRemoved(true));\n  };\n\n  let Body;\n  if (loading) {\n    Body = <Typography variant=\"body1\">Loading...</Typography>;\n  } else if (error || !data) {\n    Body = <Typography variant=\"body1\">Error.</Typography>;\n  } else {\n    const { light } = data;\n    Body = (\n      <div>\n        <Typography variant=\"h3\">{light.name}</Typography>\n        <Typography variant=\"h6\">Rename the light: </Typography>\n        <TextField\n          placeholder=\"New Light Name\"\n          value={newName}\n          color=\"primary\"\n          onChange={handleNameChange}\n        />\n        <Button onClick={handleRenameLight(light)} color=\"primary\">\n          Rename\n        </Button>\n        <Typography variant=\"h6\">{`Connected: ${light.connected}`}</Typography>\n        <StyledDiv>\n          <Typography variant=\"h6\">On: </Typography>\n          <Switch\n            checked={light.on}\n            onChange={handleOnChange(light)}\n            disabled={!light.connected}\n            color=\"primary\"\n          />\n        </StyledDiv>\n        <Typography variant=\"h6\">Brightness: </Typography>\n        <Slider\n          value={light.brightness}\n          min={0}\n          max={100}\n          step={1}\n          onChange={handleBrightnessChange(light)}\n          disabled={!light.connected}\n          color=\"primary\"\n          valueLabelDisplay=\"auto\"\n        />\n        <Typography variant=\"h6\">Color: </Typography>\n        <CircleColorPicker color={light.color} onChange={handleColorChange(light)} width={320} />\n        <Typography variant=\"h6\">{`Current Effect: ${light.effect}`}</Typography>\n        {light.supportedEffects &&\n          light.supportedEffects.map(\n            (supportedEffect): React.FunctionComponentElement<{}> => (\n              <Button\n                key={supportedEffect}\n                disabled={!light.connected}\n                color=\"primary\"\n                onClick={handleEffectChange(supportedEffect, light)}\n              >\n                {supportedEffect}\n              </Button>\n            )\n          )}\n        <Typography variant=\"h6\">Effect Speed:</Typography>\n        <Slider\n          value={light.speed}\n          min={1}\n          max={7}\n          step={1}\n          onChange={handleSpeedChange(light)}\n          color=\"primary\"\n          disabled={!light.connected}\n          valueLabelDisplay=\"auto\"\n          marks\n        />\n        <Typography variant=\"h6\">Config Info:</Typography>\n        <Typography variant=\"body1\">{`ID: ${light.id}`}</Typography>\n        <Typography variant=\"body1\">{`Name: ${light.name}`}</Typography>\n        <Typography variant=\"body1\">{`IP Address: ${light.ipAddress}`}</Typography>\n        <Typography variant=\"body1\">{`MAC Address: ${light.macAddress}`}</Typography>\n        <Typography variant=\"body1\">{`Number of LEDs: ${light.numLeds}`}</Typography>\n        <Typography variant=\"body1\">{`UDP Port: ${light.udpPort}`}</Typography>\n        <Typography variant=\"body1\">{`Version: ${light.version}`}</Typography>\n        <Typography variant=\"body1\">{`Hardware: ${light.hardware}`}</Typography>\n        <Typography variant=\"body1\">{`Color Order: ${light.colorOrder}`}</Typography>\n        <Typography variant=\"body1\">{`Strip Type: ${light.stripType}`}</Typography>\n        <Typography variant=\"h6\">Remove the light: </Typography>\n        <Button onClick={handleRemoveLight(light)} color=\"primary\">\n          Remove\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <Link to=\"/\">\n        <Button>{\"< Back\"}</Button>\n      </Link>\n      {Body}\n      {removed && <Redirect push to=\"/\" />}\n    </div>\n  );\n};\n\nexport default Light;\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\nimport styled from \"styled-components\";\nimport { useAddLightMutation, useDiscoveredLightsQuery } from \"generated/graphql\";\nimport { addLightToCache, removeDiscoveredLightFromCache } from \"lib/graphqlHelpers\";\n\nconst StyledDiv = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst AddLight = (): React.FunctionComponentElement<{}> => {\n  const [newLight, setNewLight] = React.useState(\"\");\n  const addLight = useAddLightMutation();\n  const { data, loading, error } = useDiscoveredLightsQuery({\n    fetchPolicy: \"network-only\",\n    pollInterval: 3000,\n  });\n\n  const handleChange: React.ChangeEventHandler<HTMLInputElement> = (e): void => {\n    setNewLight(e.target.value);\n  };\n\n  const handleAddLight = (id: string): React.MouseEventHandler => (): void => {\n    addLight({\n      variables: { id },\n      update: (proxy, { data: addLightData }): void => {\n        if (!addLightData || !addLightData.addLight) return;\n        const lightToAdd = addLightData.addLight;\n\n        /**\n         * Note: This will not automatically remove the light from the discoveredLights list if a\n         * discoveredLights query is already in flight. It will correctly update after the query is finished.\n         */\n        removeDiscoveredLightFromCache(proxy, lightToAdd);\n        addLightToCache(proxy, lightToAdd);\n      },\n    });\n  };\n\n  const handleAddCustomLight: React.MouseEventHandler = (): void => {\n    addLight({\n      variables: { id: newLight },\n      update: (proxy, { data: addLightData }): void => {\n        if (!addLightData || !addLightData.addLight) return;\n        const lightToAdd = addLightData.addLight;\n\n        removeDiscoveredLightFromCache(proxy, lightToAdd);\n        addLightToCache(proxy, lightToAdd);\n      },\n    }).then((): void => {\n      setNewLight(\"\");\n    });\n  };\n\n  let Body;\n  if (loading) {\n    Body = <Typography variant=\"body1\">Loading...</Typography>;\n  } else if (error) {\n    Body = <Typography variant=\"body1\">Error</Typography>;\n  } else if (!data || !data.discoveredLights || !data.discoveredLights.length) {\n    Body = <Typography variant=\"body1\">None</Typography>;\n  } else {\n    Body = data.discoveredLights.map(\n      (light): React.FunctionComponentElement<{}> => (\n        <StyledDiv key={light.id}>\n          <Button onClick={handleAddLight(light.id)}>Add</Button>\n          <Typography variant=\"body1\">{light.id}</Typography>\n        </StyledDiv>\n      )\n    );\n  }\n\n  return (\n    <div>\n      <Typography variant=\"h4\">Add Light</Typography>\n      <StyledDiv>\n        <Button onClick={handleAddCustomLight}>Add</Button>\n        <TextField placeholder=\"New Light ID\" value={newLight} onChange={handleChange} />\n      </StyledDiv>\n      <Typography variant=\"h6\">Discovered Lights</Typography>\n      {Body}\n    </div>\n  );\n};\n\nexport default AddLight;\n","import React from \"react\";\n\n// TODO: Implement\nconst About = (): React.FunctionComponentElement<{}> => <div>About</div>;\n\nexport default About;\n","import React, { MouseEventHandler, ChangeEventHandler } from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport Switch from \"@material-ui/core/Switch\";\nimport styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\nimport { useRemoveLightMutation, Light, useSetLightMutation } from \"generated/graphql\";\nimport { removeLightFromCache } from \"lib/graphqlHelpers\";\nimport { useLightsQueryWithSubscriptions } from \"lib/hooks\";\n\nconst StyledDiv = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst Home = (): React.FunctionComponentElement<{}> => {\n  // TODO: Figure out how to include cache-and-network without ts-ignore\n  // We use cache-and-network\n  // @ts-ignore\n  const { data, error, loading, networkStatus, refetch } = useLightsQueryWithSubscriptions({\n    fetchPolicy: \"cache-and-network\",\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const removeLight = useRemoveLightMutation();\n  const setLight = useSetLightMutation();\n\n  const handleRemoveLight = (id: string): MouseEventHandler => (): void => {\n    removeLight({\n      variables: { id },\n      update: (proxy, { data: removeLightData }): void => {\n        if (!removeLightData || !removeLightData.removeLight) return;\n\n        const lightToRemove = removeLightData.removeLight;\n        removeLightFromCache(proxy, lightToRemove);\n      },\n    });\n  };\n\n  // TODO: Throttle this and make it generic\n  const handleStateChange = (light: Light): ChangeEventHandler<HTMLInputElement> => (e): void => {\n    const on = e.target.checked;\n\n    setLight({\n      variables: { id: light.id, lightData: { on } },\n      optimisticResponse: {\n        __typename: \"Mutation\",\n        setLight: {\n          __typename: \"Light\",\n          ...light,\n          ...{ on },\n        },\n      },\n    });\n  };\n\n  const handleRefetch = (): unknown => refetch();\n\n  let Body;\n  if (loading || networkStatus === 4) {\n    Body = <Typography variant=\"body1\">Loading...</Typography>;\n  } else if (error) {\n    Body = <Typography variant=\"body1\">Error.</Typography>;\n  } else if (!data || !data.lights || !data.lights.length) {\n    Body = <Typography variant=\"body1\">None</Typography>;\n  } else {\n    Body = data.lights.map(\n      (light): React.FunctionComponentElement<{}> => (\n        <StyledDiv key={light.id}>\n          <Button onClick={handleRemoveLight(light.id)}>Remove</Button>\n          <Switch\n            checked={light.on}\n            onChange={handleStateChange(light)}\n            disabled={!light.connected}\n            color=\"primary\"\n          />\n          <Link to={`/light/${light.id}`}>\n            <Typography variant=\"body1\">{light.name}</Typography>\n          </Link>\n        </StyledDiv>\n      )\n    );\n  }\n\n  return (\n    <div>\n      <Typography variant=\"h4\">Prysma</Typography>\n      <Button onClick={handleRefetch}>Refetch</Button>\n      <Typography variant=\"h6\">Light List</Typography>\n      {Body}\n    </div>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport { ApolloProvider } from \"react-apollo-hooks\"; // Connect Apollo to React\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { StylesProvider } from \"@material-ui/styles\";\nimport { ThemeProvider } from \"styled-components\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport { client } from \"lib/apollo\";\nimport NotFound from \"screens/NotFound\";\nimport Light from \"screens/Light\";\nimport AddLight from \"screens/AddLight\";\nimport About from \"screens/About\";\nimport Home from \"screens/Home\";\n\nconst theme = createMuiTheme();\n\nconst App = (): React.FunctionComponentElement<{}> => (\n  <ApolloProvider client={client}>\n    <StylesProvider injectFirst>\n      <ThemeProvider theme={theme}>\n        <Router>\n          <CssBaseline />\n          <AppBar position=\"static\">\n            <Tabs value={0}>\n              <Tab label=\"Home\" component={Link} to=\"/\" />\n              <Tab label=\"Add Light\" component={Link} to=\"/addLight/\" />\n              <Tab label=\"About\" component={Link} to=\"/about/\" />\n            </Tabs>\n          </AppBar>\n          <Switch>\n            <Route path=\"/\" exact component={Home} />\n            <Route path=\"/about/\" exact component={About} />\n            <Route path=\"/addLight/\" exact component={AddLight} />\n            <Route path=\"/light/:id\" exact component={Light} />\n            <Route component={NotFound} />\n          </Switch>\n        </Router>\n      </ThemeProvider>\n    </StylesProvider>\n  </ApolloProvider>\n);\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"typeface-roboto\"; // Font Import so we don't have to use the CDN\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}